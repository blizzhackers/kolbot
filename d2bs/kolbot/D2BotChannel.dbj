include("StarterConfig.js");

// D2BotChannel settings
StarterConfig.Games = [""]; // List of games to look for. Example: Games: ["some baal-", "chaos run-"],
StarterConfig.Passwords = [""]; // List of game passwords. Each array in Games array should have a matching element in Passwords. Use "" for blank pw.
StarterConfig.JoinDelay = 5; // Seconds to wait between announcement and clicking join
StarterConfig.FriendListQuery = 0; // Seconds between "/f l" retries. 0 = disable
StarterConfig.SkipMutedKey = true;
StarterConfig.MutedKeyTrigger = "Your account has had all chat privileges suspended.";

// Override default values for StarterConfig under here by following format
// StarterConfig.ValueToChange = value; // Example: StarterConfig.MinGameTime = 500; // changes MinGameTime to 500 seconds 

// Advanced config - you don't have to edit this unless you need some of the features provided
const AdvancedConfig = {
	/* Features: Override channel for each profile, Override join delay for each profile

	* Format *:
		"Profile Name": {JoinDelay: number_of_seconds}
	or
		"Profile Name": {JoinChannel: "channel name"}
	or
		"Profile Name": {JoinChannel: "channel name", JoinDelay: number_of_seconds}

	* Example * (don't edit this - it's just an example):

		"MyProfile1": {JoinDelay: 3},
		"MyProfile2": {JoinChannel: "some channel"},
		"MyProfile3": {JoinChannel: "some other channel", JoinDelay: 11}
		"MyProfile4": {AnnounceGames: true, AnnounceMessage: "Joining game"} // announce game you are joining
	*/

	// Put your lines under this one. Multiple entries are separated by commas. No comma after the last one.

	"Test": {
		JoinChannel: "op nnqry",
		JoinDelay: 3,
		AnnounceGames: true,
		AnnounceMessage: "Joining game" // output: Joining game Baals-23
	}
};


// No touchy!
include("json2.js");
include('polyfill.js');
include("OOG.js");
include("automule.js");
include("gambling.js");
include("torchsystem.js");
include("craftingsystem.js");
include("common/misc.js");
include("common/util.js");
let Control_1 = require('./modules/Control');
let sdk = require('./modules/sdk');

let connectFail,
	channelTick = getTickCount(),
	loginRetry = 0,
	fListTick = 0,
	retry = 0,
	badGames = [],
	joinInfo = {
		gameName: "",
		gamePass: "",
		oldGame: "",
		inGame: false
	};

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

let Override_1 = require('../modules/Override');

new Override_1.Override(Starter, Starter.receiveCopyData, function(orignal, mode, msg) {
	if (mode === 3) {
		Starter.isUp = (me.gameReady ? "yes" : "no");
		if (!me.gameReady) {
			return;
		}
		Starter.gameInfo.gameName = (me.gamename || "");
		Starter.gameInfo.gamePass = (me.gamepassword || "");
	}
	orignal(mode, msg);
}).apply();

function locationAction (location) {
	let i, n, string, text, regex, fullText, lines;

	MainSwitch:
	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();

		break;
	case sdk.game.locations.Lobby:
		D2Bot.updateStatus("Lobby");

		me.blockKeys = false;
		loginRetry = 0;
		!Starter.firstLogin && (Starter.firstLogin = true);
		Control_1.LobbyEnterChat.click();

		break;
	case sdk.game.locations.LobbyChat:
		D2Bot.updateStatus("Lobby Chat");

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;
			retry = 0;
		}

		// Muted key handler
		fullText = "";
		lines = Control_1.LobbyChat.getText();

		if (!lines) {
			break;
		}

		fullText = lines.join(" ").replace(/\s+/g, " ");

		if (fullText.match(StarterConfig.MutedKeyTrigger.replace(/\s+/g, " "), "gi")) {
			D2Bot.printToConsole(Starter.gameInfo.mpq + " is muted.", 6);

			ControlAction.mutedKey = true;

			if (StarterConfig.SkipMutedKey) {
				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}

		if (!ControlAction.mutedKey && (!Starter.chatActionsDone || getTickCount() - channelTick >= 120e3)) {
			if (StarterConfig.JoinChannel !== "") {
				if (typeof AdvancedConfig[me.profile] === "object" && typeof AdvancedConfig[me.profile].JoinChannel === "string") {
					joinInfo.joinChannel = AdvancedConfig[me.profile].JoinChannel;
				} else {
					joinInfo.joinChannel = StarterConfig.JoinChannel;
				}

				if (joinInfo.joinChannel) {
					if (ControlAction.joinChannel(joinInfo.joinChannel)) {
						Starter.useChat = true;
					} else {
						print("Unable to join channel, chat messages disabled.");

						Starter.useChat = false;
					}
				}
			}

			// Added !chatActionsDone condition to prevent spam
			if (StarterConfig.FirstJoinMessage !== "" && !Starter.chatActionsDone) {
				ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);
				Starter.sayMsg(StarterConfig.FirstJoinMessage);
				delay(500);
			}

			Starter.chatActionsDone = true;
			channelTick = getTickCount();
		}

		if (StarterConfig.FriendListQuery > 0 && getTickCount() - fListTick >= StarterConfig.FriendListQuery * 1000) {
			say("/f l");

			fListTick = getTickCount();
		}

		switch (Starter.lastGameStatus) {
		case "pending": // Most likely FTJ (can't detect it directly)
			string = "";
			text = Control_1.LobbyServerDown.getText();

			if (text) {
				for (i = 0; i < text.length; i += 1) {
					string += text[i];

					if (i !== text.length - 1) {
						string += " ";
					}
				}

				// Didn't meet level restriction
				if (string === getLocaleString(5162)) {
					print(string);

					retry = 3;

					break;
				}
			}

			retry += 1;

			D2Bot.updateRuns();

			if (retry < 3) {
				Control_1.JoinGameWindow.click();

				break MainSwitch;
			}

			break;
		case "DNE": // Game didn't exist
			retry += 1;

			break;
		case "FULL": // Game is full
			retry = 3;

			break;
		}

		if (retry >= 3) {
			D2Bot.printToConsole("Failed to join " + joinInfo.gameName + ". Aborting.");
			badGames.push(joinInfo.gameName);

			Starter.lastGameStatus = "ready";
			joinInfo.oldGame = joinInfo.gameName;
			retry = 0;
		}

		fullText = "";
		lines = Control_1.LobbyChat.getText();

		if (!lines) {
			break;
		}

		fullText = lines.join(" ").replace(/\s+/g, " ");

		for (n = 0; n < StarterConfig.Games.length; n += 1) {
			if (StarterConfig.Games[n] === "") continue;
			regex = new RegExp("\\W+" + StarterConfig.Games[n].toLowerCase() + "\\d+", "gi");
			joinInfo.gameName = fullText.match(regex);

			if (joinInfo.gameName) {
				// use last match and trim it
				joinInfo.gameName = joinInfo.gameName[joinInfo.gameName.length - 1].toString().replace(/^\W*/, "");
				joinInfo.gamePass = StarterConfig.Passwords[n] || "";

				if (joinInfo.gameName && joinInfo.gameName !== joinInfo.oldGame && badGames.indexOf(joinInfo.gameName) === -1) {
					Control_1.JoinGameWindow.click();

					break;
				}
			}
		}

		break;
	case sdk.game.locations.WaitingInLine:
	case sdk.game.locations.CreateGame:
		Control_1.CancelCreateGame.click();

		break;
	case sdk.game.locations.JoinGame:
		if (joinInfo.oldGame === joinInfo.gameName || badGames.includes(joinInfo.gameName)) {
			Control_1.CancelJoinGame.click();
		}

		D2Bot.updateStatus("Join Game");

		if (joinInfo.gameName !== "") {
			print("ÿc2Joining ÿc0" + joinInfo.gameName);
			Control_1.JoinGameName.setText(joinInfo.gameName);
			Control_1.JoinGamePass.setText(joinInfo.gamePass);

			if (typeof AdvancedConfig[me.profile] === "object" && typeof AdvancedConfig[me.profile].AnnounceGame === "boolean" && typeof AdvancedConfig[me.profile].AnnounceMessage === "string") {
				Starter.sayMsg(AdvancedConfig[me.profile].AnnounceMessage + " " + joinInfo.gameName);
			}

			// Only delay on first join - the rest is handled by GameDoesNotExistTimeout. Any other case is instant fail (ie. full game).
			if (retry === 0 || Starter.lastGameStatus === "pending") {
				if (typeof AdvancedConfig[me.profile] === "object" && typeof AdvancedConfig[me.profile].JoinDelay === "number") {
					ControlAction.timeoutDelay("Custom Join Delay", AdvancedConfig[me.profile].JoinDelay * 1e3);
				} else if (StarterConfig.JoinDelay) {
					ControlAction.timeoutDelay("Join Game Delay", StarterConfig.JoinDelay * 1e3);
				}
			}

			me.blockmouse = true;

			Control_1.CreateGame.click();

			me.blockmouse = false;
			Starter.lastGameStatus = "pending";

			Starter.locationTimeout(5000, location);
		}

		break;
	case sdk.game.locations.Ladder:
		break;
	case sdk.game.locations.ChannelList:
		break;
	case sdk.game.locations.MainMenu:
	case sdk.game.locations.Login:
	case sdk.game.locations.CharSelect:
	case sdk.game.locations.SplashScreen:
		// Wrong char select screen fix
		if (getLocation() === sdk.game.locations.CharSelect
			&& (Profile().type === sdk.game.profiletype.Battlenet && !Control_1.CharSelectCurrentRealm.control)
			|| ((Profile().type !== sdk.game.profiletype.Battlenet && Control_1.CharSelectCurrentRealm.control))) {
			Control_1.CharSelectExit.click();
			
			break;
		}

		// multiple realm botting fix in case of R/D or disconnect
		if (Starter.firstLogin && getLocation() === sdk.game.locations.Login) {
			Control_1.CharSelectExit.click();
		}

		D2Bot.updateStatus("Logging In");

		try {
			login(me.profile);
		} catch (e) {
			if (getLocation() === sdk.game.locations.CharSelect && loginRetry < 2) {
				if (!ControlAction.findCharacter(Starter.profileInfo)) {
					// dead hardcore character on sp
					if (getLocation() === sdk.game.locations.OkCenteredErrorPopUp) {
						// Exit from that pop-up
						Control_1.OkCentered.click();
						D2Bot.printToConsole("Character died", 9);
						D2Bot.stop();
					} else {
						loginRetry++;
					}
				} else {
					login(me.profile);
				}
			} else {
				print(e + " " + getLocation());
			}
		}

		break;
	case sdk.game.locations.LoginError: // Login Error
		string = "";
		text = Control_1.LoginErrorText.getText();

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");

				break;
			case getLocaleString(5208):
				D2Bot.updateStatus("Invalid Account");
				D2Bot.printToConsole("Invalid Account");

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("Invalid CDKey");
				D2Bot.printToConsole("Invalid CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected");
				D2Bot.printToConsole("Disconnected");
				Control_1.LoginErrorOk.click();

				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}

			Control_1.LoginErrorOk.click();
	
			while (true) {
				delay(1000);
			}
		}

		break;
	case sdk.game.locations.LoginUnableToConnect: // Unable To Connect
		D2Bot.updateStatus("Unable To Connect");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		} else {
			connectFail = true;
		}

		Control_1.UnableToConnectOk.click();

		break;
	case sdk.game.locations.RealmDown: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!Control_1.CharSelectExit.click()) {
			break;
		}

		Starter.updateCount();
		ControlAction.timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
		D2Bot.CDKeyRD();

		if (Starter.gameInfo.switchKeys) {
			D2Bot.printToConsole("Realm Down - Changing CD-Key");
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		}

		break;
	case sdk.game.locations.Disconnected: // Character Select / Main Menu - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		Control_1.OkCentered.click();
		break;
	case sdk.game.locations.CharSelectPleaseWait: // Character Select - Please Wait popup
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			Control_1.OkCentered.click();
		}

		break;
	case sdk.game.locations.LobbyLostConnection: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		Control_1.OkCentered.click();
		break;
	case sdk.game.locations.CdKeyInUse: // Login - Cdkey In Use
		D2Bot.printToConsole(Starter.gameInfo.mpq + " is in use by " + Control_1.LoginCdKeyInUseBy.getText(), 6);
		D2Bot.CDKeyInUse();

		if (Starter.gameInfo.switchKeys) {
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			Control_1.UnableToConnectOk.click();
			ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case sdk.game.locations.SelectDifficultySP: // Single Player - Select Difficulty
		break;
	case sdk.game.locations.MainMenuConnecting: // Main Menu - Connecting
		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			Control_1.LoginCancelWait.click();
		}

		break;
	case sdk.game.locations.InvalidCdKey: // Login - Invalid Cdkey (classic or xpac)
		text = Control_1.LoginInvalidCdKey.getText();
		string = "";

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}
		}

		switch (string) {
		case getLocaleString(10914):
			D2Bot.printToConsole(Starter.gameInfo.mpq + " LoD key in use by " + Control_1.LoginCdKeyInUseBy.getText(), 6);
			D2Bot.CDKeyInUse();

			if (Starter.gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				Control_1.UnableToConnectOk.click();
				ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		default:
			if (Starter.gameInfo.switchKeys) {
				D2Bot.printToConsole("Invalid CD-Key");
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				Control_1.UnableToConnectOk.click();
				ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		}

		break;
	case sdk.game.locations.CharSelectConnecting: // Character Select - Connecting
	case sdk.game.locations.CharSelectNoChars: // Empty character screen
		string = "";
		text = Control_1.CharSelectError.getText();

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			if (string === getLocaleString(11161)) { // CDKey disabled from realm play
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}

		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			Control_1.CharSelectExit.click();
			Starter.gameInfo.rdBlocker && D2Bot.restart();
		}

		break;
	case sdk.game.locations.ServerDown: // Server Down - not much to do but wait..
		break;
	case sdk.game.locations.LobbyPleaseWait: // Lobby - Please Wait
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			Control_1.OkCentered.click();
		}

		break;
	case sdk.game.locations.GameNameExists: // Lobby - Game Name Exists
		break;
	case sdk.game.locations.GatewaySelect: // Gateway Select
		Control_1.GatewayCancel.click();

		break;
	case sdk.game.locations.GameDoesNotExist: // Lobby - Game Does Not Exist
		Control_1.JoinGameWindow.click();
		Control_1.CancelCreateGame.click();
		ControlAction.timeoutDelay("Game doesn't exist", StarterConfig.GameDoesNotExistTimeout * 1e3);

		Starter.lastGameStatus = "DNE";

		break;
	case sdk.game.locations.GameIsFull: // Game is full
		badGames.push(joinInfo.gameName);
		Control_1.JoinGameWindow.click();
		Control_1.CancelCreateGame.click();

		Starter.lastGameStatus = "FULL";

		break;
	case sdk.game.locations.OtherMultiplayer: // Other Multiplayer
		Control_1.OtherMultiplayerCancel.click();

		break;
	case sdk.game.locations.TcpIp: // TCP/IP Game
		Control_1.TcpIpCancel.click();

		break;
	case sdk.game.locations.TcpIpEnterIp: // TCP/IP Game - Enter Host IP
		try {
			login(me.profile);
		} catch (e) {
			print(e);
		}

		break;
	case sdk.game.locations.TcpIpUnableToConnect: // Unable To Connect TCP/IP
		D2Bot.updateStatus("Unable To Connect TCP/IP");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.TCPIPNoHostDelay * 1e3);

			connectFail = false;
		} else {
			connectFail = true;
		}

		Control_1.OkCentered.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main() {
	addEventListener('copydata', Starter.receiveCopyData);
	addEventListener('scriptmsg', Starter.scriptMsgEvent);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;
			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, 10);
		}

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(Starter.profileInfo).length) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				joinInfo.inGame = true;

				if (!Starter.inGame) {
					print("Updating Status");

					badGames.push(joinInfo.gameName);
					joinInfo.oldGame = me.gamename;
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					Starter.gameStart = getTickCount();

					DataFile.updateStats("runs", Starter.gameCount);
				}

				D2Bot.updateStatus("Game: " + me.gamename + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		joinInfo.inGame = false;

		locationAction(getLocation());
		delay(1000);
	}
}
