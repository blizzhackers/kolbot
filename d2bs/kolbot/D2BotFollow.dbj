/**
*  @filename    D2BotFollow.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for following bots running on the same pc
*
*  @typedef {import("./sdk/globals")}
*/

include("critical.js"); // required
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// D2BotFollow specific settings - for global settings see libs/starter/StarterConfig.js
Starter.Config.JoinRetryDelay = 5; // Time in seconds to wait before next join attempt
const {
  JoinSettings
} = require("./libs/systems/follow/FollowConfig");

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// the only things we really need from these are their oog checks
includeSystemLibs();

const Overrides = require("./libs/modules/Override");

if (typeof Starter.AdvancedConfig[me.profile] === "object") {
  Object.assign(Starter.Config, Starter.AdvancedConfig[me.profile]);
}
delete Starter.AdvancedConfig;

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
  Starter.firstRun = true;
}

new Overrides.Override(Starter, Starter.receiveCopyData, function (orignal, mode, msg) {
  if (mode === 3) {
    Starter.isUp = (me.gameReady ? "yes" : "no");
    if (!me.gameReady) {
      return;
    }
    Starter.gameInfo.gameName = (me.gamename || "");
    Starter.gameInfo.gamePass = (me.gamepassword || "");
  } else {
    orignal(mode, msg);
  }
}).apply();

const locationAction = (function () {
  let announced = false;
  let lastGameTick;

  const lastGame = [];
  /**
   * @type {Map<string, { lastAsked: number, game: string }>}
   */
  const tracker = new Map();
  const Controls = require("./libs/modules/Control");
  const {
    locations,
    addLocations
  } = require("./libs/oog/Locations");

  /** @param {string} leader */
  const joinCheck = function (leader) {
    D2Bot.requestGame(leader);
    delay(500);

    if (!Starter.joinInfo.inGame || (lastGame.length && lastGame.indexOf(Starter.joinInfo.gameName) === -1)) {
      D2Bot.printToConsole("Game is finished. Stopping join delay.");
      Starter.gameInfo.gameName = "";
      Starter.gameInfo.gamePass = "";

      return true;
    }

    return false;
  };

  locations.set(sdk.game.locations.Lobby,
    function () {
      D2Bot.updateStatus("Lobby");

      me.blockKeys = false;
      Starter.loginRetry = 0;
      !Starter.firstLogin && (Starter.firstLogin = true);

      if (Starter.Config.JoinChannel !== "") {
        Controls.LobbyEnterChat.click();

        return;
      }

      if (Starter.inGame) {
        if (AutoMule.outOfGameCheck()
          || TorchSystem.outOfGameCheck()
          || Gambling.outOfGameCheck()
          || CraftingSystem.outOfGameCheck()) {
          return;
        }

        console.log("updating runs");
        D2Bot.updateRuns();

        lastGameTick = getTickCount();
        Starter.gameCount += 1;
        Starter.lastGameStatus = "ready";
        Starter.inGame = false;
      }

      Starter.LocationEvents.openJoinGameWindow();
    }
  );
  addLocations([sdk.game.locations.WaitingInLine, sdk.game.locations.CreateGame],
    function () {
      Controls.CancelCreateGame.click();
      Controls.JoinGameWindow.click();
    }
  );
  locations.set(sdk.game.locations.LobbyChat,
    function () {
      D2Bot.updateStatus("Lobby Chat");

      if (Starter.inGame) {
        if (AutoMule.outOfGameCheck()
          || TorchSystem.outOfGameCheck()
          || Gambling.outOfGameCheck()
          || CraftingSystem.outOfGameCheck()) {
          return;
        }

        console.log("updating runs");
        D2Bot.updateRuns();

        lastGameTick = getTickCount();
        Starter.gameCount += 1;
        Starter.lastGameStatus = "ready";
        Starter.inGame = false;
      }

      if (!Starter.chatActionsDone) {
        Starter.chatActionsDone = true;

        ControlAction.timeoutDelay("Chat delay", Starter.Config.ChatActionsDelay * 1e3);
        say("/j " + Starter.Config.JoinChannel);
        delay(1000);

        if (Starter.Config.FirstJoinMessage !== "") {
          say(Starter.Config.FirstJoinMessage);
          delay(500);
        }
      }

      Starter.LocationEvents.openJoinGameWindow();
    }
  );
  locations.set(sdk.game.locations.JoinGame,
    function (location) {
      D2Bot.updateStatus("Join Game");

      if (!tracker.size) {
        for (let i in JoinSettings) {
          if (JoinSettings.hasOwnProperty(i) && typeof i === "string") {
            for (let profile of JoinSettings[i]) {
              if (profile === me.profile || profile === "all") {
                tracker.set(i, { lastAsked: 0, game: "" });
              }
            }
          }
        }
      }

      if (!tracker.size && !announced) {
        console.log("No leader");
        D2Bot.printToConsole("No leader");
        announced = true;

        return;
      }

      JoinLoop2:
      for (let i = 0; i < 5; i += 1) {
        for (let [leader, _check] of tracker) {
          Starter.joinInfo = {};
          D2Bot.requestGame(leader);
          delay(100);

          if (!Starter.joinInfo.hasOwnProperty("gameName") || Starter.joinInfo.gameName === "") {
            delay(500);
            continue;
          }

          /**
          * @todo handle rejoin, need to keep track of game averages and when requesting game from a
          * leader who's game we left get the current game time
          * and see if there is x amount of time left that makes it worth it vs waiting for next.
          */
          tracker.set(leader, { lastAsked: getTickCount(), game: Starter.joinInfo.gameName });
          if (lastGame.indexOf(Starter.joinInfo.gameName) === -1
            || Starter.lastGameStatus === "pending") {
            Controls.JoinGameName.setText(Starter.joinInfo.gameName);
            Controls.JoinGamePass.setText(Starter.joinInfo.gamePass);

            if (Starter.lastGameStatus === "pending"
              || (Starter.gameInfo.error && DataFile.getStats().gameName === Starter.joinInfo.gameName)) {
              D2Bot.printToConsole("Failed to join game");
              ControlAction.timeoutDelay("Join Delay", Starter.Config.JoinRetryDelay * 1000, joinCheck(leader));
              D2Bot.updateRuns();
              D2Bot.requestGame(leader);
              delay(200);

              if (!Starter.joinInfo.inGame) {
                Starter.lastGameStatus = "ready";

                break;
              }
            }

            if (!Starter.joinInfo.inGame) {
              ControlAction.timeoutDelay("Leader Delay", (Starter.joinInfo.delay || 1000) + Time.seconds(3));
              continue;
            }

            // Don't join immediately after previous game to avoid FTJ
            if (getTickCount() - lastGameTick < 5000) {
              ControlAction.timeoutDelay("Game Delay", (lastGameTick - getTickCount() + 5000));
            }

            console.log("joining game " + Starter.joinInfo.gameName);

            if (typeof Starter.Config.JoinDelay === "number") {
              ControlAction.timeoutDelay("Custom Join Delay", Starter.Config.JoinDelay * 1e3);
            }

            me.blockMouse = true;

            DataFile.updateStats("gameName", Starter.joinInfo.gameName);
            Controls.JoinGame.click();

            me.blockMouse = false;

            lastGame.push(Starter.joinInfo.gameName);

            // Might need a fixed number. Right now it stores 1 game per leader.
            lastGame.length > tracker.size && lastGame.shift();

            Starter.lastGameStatus = "pending";
            Starter.locationTimeout(15000, location);

            break JoinLoop2;
          } else {
            // for now, if leader is in game and it's the last game we were in. delay to prevent copyData spam
            if (lastGame.includes(Starter.joinInfo.gameName)) {
              ControlAction.timeoutDelay(
                "Waiting for new game from " + leader,
                Time.seconds((Starter.joinInfo.inGame ? 5 : 2) * (i + 1))
              );
            }
          }
        }
      }
    }
  );
  locations.set(sdk.game.locations.GameIsFull,
    function () {
      D2Bot.printToConsole("Game is full");
      Controls.JoinGameWindow.click();
      lastGame.push(Starter.joinInfo.gameName);
      Starter.lastGameStatus = "ready";
    }
  );
  locations.set(sdk.game.locations.TcpIp,
    function () {
      Profile().type === sdk.game.profiletype.TcpIpJoin
        ? Controls.TcpIpJoin.click()
        : Controls.TcpIpCancel.click();
    }
  );
  locations.set(sdk.game.locations.TcpIpEnterIp,
    function () {
      try {
        if (!tracker.size) {
          for (let i in JoinSettings) {
            if (JoinSettings.hasOwnProperty(i) && typeof i === "string") {
              for (let profile of JoinSettings[i]) {
                if (profile === me.profile || profile === "all") {
                  tracker.set(i, { lastAsked: 0, game: "" });
                }
              }
            }
          }
        }

        mainLoop:
        for (let i = 0; i < 3; i++) {
          for (let [leader] of tracker) {
            D2Bot.requestGame(leader);

            if (Object.keys(Starter.joinInfo).length && Starter.joinInfo.gameName !== "") {
              break mainLoop;
            }
          }
        }

        if (Controls.IPAdress.setText(Object.keys(Starter.joinInfo).length ? Starter.joinInfo.gameName : "localhost")
          && Controls.IPAdressOk.click()
          && Starter.locationTimeout(2e3, sdk.game.locations.TcpIpEnterIp)) {
          getLocation() === sdk.game.locations.CharSelect && login(me.profile);
        }
      } catch (e) {
        console.error(e);
      }
    }
  );

  return {
    /** @param {number} loc */
    run: function (loc) {
      try {
        let func = locations.get(loc);
        if (typeof func === "function") {
          func(loc);
        } else if (loc !== undefined && loc !== null) {
          console.log("Unhandled location: " + loc);
        }
      } catch (e) {
        console.error(e);
      }
    },
  };
})();

function main () {
  debugLog(me.profile);
  addEventListener("copydata", Starter.receiveCopyData);
  addEventListener("scriptmsg", Starter.scriptMsgEvent);

  while (!Starter.handle) {
    delay(100);
  }

  DataFile.updateStats("handle", Starter.handle);
  D2Bot.init();
  load("threads/heartbeat.js");

  while (!Object.keys(Starter.gameInfo).length) {
    D2Bot.requestGameInfo();
    delay(500);
  }

  Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

  if (Starter.gameInfo.error) {
    delay(200);

    if (!!DataFile.getStats().debugInfo) {
      Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;

      D2Bot.printToConsole(
        "Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript
        + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area,
        sdk.colors.D2Bot.Gray
      );
    }

    ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
    D2Bot.updateRuns();
  }

  DataFile.updateStats("debugInfo", JSON.stringify({ currScript: "none", area: "out of game" }));

  while (!Object.keys(Starter.profileInfo).length) {
    D2Bot.getProfile();
    console.log("Getting Profile");
    delay(500);
  }

  while (true) {
    // returns true before actually in game so we can't only use this check
    while (me.ingame) {
      // returns false when switching acts so we can't use while
      if (me.gameReady) {
        if (!Starter.inGame) {
          console.log("ÿc4Updating Status");
          Starter.lastGameStatus = "ingame";
          Starter.inGame = true;
          Starter.gameStart = getTickCount();

          DataFile.updateStats("runs", Starter.gameCount);
        }

        D2Bot.updateStatus(
          me.charname + " (" + me.charlvl + ") | Game: " + (me.gamename || "singleplayer")
          + Starter.timer(Starter.gameStart)
        );
      }

      delay(1000);
    }

    locationAction.run(getLocation());
    delay(1000);
  }
}
