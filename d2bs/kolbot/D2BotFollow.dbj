include("StarterConfig.js");

// D2BotFollow settings
StarterConfig.JoinRetryDelay = 5; // Time in seconds to wait before next join attempt

// Override default values for StarterConfig under here by following format
// StarterConfig.ValueToChange = value; // Example: StarterConfig.MinGameTime = 500; // changes MinGameTime to 500 seconds

/* Join game settings
	Format: "leader's profile": ["leecher 1 profile", "leecher 2 profile", ...]
	If you want everyone to join the same leader, use "leader's profile": ["all"]
	NOTE: Use PROFILE names (profile matches window title), NOT character/account names
	leader:leecher groups need to be divided by a comma
	example:
		let JoinSettings = {
			"lead1": ["follow1", "follow2"],
			"lead2": ["follow3", "follow4"]
		};
*/

const JoinSettings = {
	"Leader": ["Leecher"]
};

// Advanced config - you don't have to edit this unless you need some of the features provided
const AdvancedConfig = {
	/* Features: Override join delay for each profile

	* Format *:
		"Profile Name": {JoinDelay: number_of_seconds}

	* Example * (don't edit this - it's just an example):
		"MyProfile1": {JoinDelay: 3},
		"MyProfile2": {JoinDelay: 6}
	*/

	// Put your lines under this one. Multiple entries are separated by commas. No comma after the last one.

};

// No touchy!
include("json2.js");
include('polyfill.js');
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("common/misc.js");
include("common/util.js");
let Control_1 = require('./modules/Control');
let sdk = require('./modules/sdk');

let i, j, lastGameTick, connectFail,
	loginRetry = 0,
	leader = "",
	announced = false,
	lastGame = [];

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

let Override_1 = require('../modules/Override');

new Override_1.Override(Starter, Starter.receiveCopyData, function(orignal, mode, msg) {
	if (mode === 3) {
		Starter.isUp = (me.gameReady ? "yes" : "no");
		if (!me.gameReady) {
			return;
		}
		Starter.gameInfo.gameName = (me.gamename || "");
		Starter.gameInfo.gamePass = (me.gamepassword || "");
	}
	orignal(mode, msg);
}).apply();

function joinCheck (leader) {
	D2Bot.requestGame(leader);
	delay(500);

	if (!Starter.joinInfo.inGame || (lastGame.length && lastGame.indexOf(Starter.joinInfo.gameName) === -1)) {
		D2Bot.printToConsole("Game is finished. Stopping join delay.");

		return true;
	}

	return false;
}

function locationAction () {
	if (me.ingame) {
		return;
	}

	let i, string, text;
	let location = getLocation();

	MainSwitch:
	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();

		break;
	case sdk.game.locations.Lobby:	// Lobby
		D2Bot.updateStatus("Lobby");

		me.blockKeys = false;
		loginRetry = 0;
		!Starter.firstLogin && (Starter.firstLogin = true);

		if (StarterConfig.JoinChannel !== "") {
			Control_1.LobbyEnterChat.click();

			break;
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			lastGameTick = getTickCount();
			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;
		}

		if (!Control_1.JoinGameWindow.click()) {
			break;
		}

		// in case join button gets bugged
		if (!Starter.locationTimeout(5000, location)) {
			if (!Control_1.CreateGameWindow.click()) {
				break;
			}

			if (!Control_1.JoinGameWindow.click()) {
				break;
			}
		}

		break;
	case sdk.game.locations.WaitingInLine:
	case sdk.game.locations.CreateGame:
		Control_1.CancelCreateGame.click();
		Control_1.JoinGameWindow.click();

		break;
	case sdk.game.locations.LobbyChat:
		D2Bot.updateStatus("Lobby Chat");

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			lastGameTick = getTickCount();
			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;
		}

		if (!Starter.chatActionsDone) {
			Starter.chatActionsDone = true;

			ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);
			say("/j " + StarterConfig.JoinChannel);
			delay(1000);

			if (StarterConfig.FirstJoinMessage !== "") {
				say(StarterConfig.FirstJoinMessage);
				delay(500);
			}
		}

		if (!Control_1.JoinGameWindow.click()) {
			break;
		}

		// in case join button gets bugged
		if (!Starter.locationTimeout(5000, location)) {
			if (!Control_1.CreateGameWindow.click()) {
				break;
			}

			if (!Control_1.JoinGameWindow.click()) {
				break;
			}
		}

		break;
	case sdk.game.locations.JoinGame:
		D2Bot.updateStatus("Join Game");

		if (!leader) {
			leader = [];

			for (i in JoinSettings) {
				if (JoinSettings.hasOwnProperty(i) && typeof i === "string") {
					for (j = 0; j < JoinSettings[i].length; j += 1) {
						if (JoinSettings[i][j] === me.profile || JoinSettings[i][j] === "all") {
							leader.push(i);
						}
					}
				}
			}
		}

		if (!leader || !leader.length && !announced) {
			print("No leader");
			D2Bot.printToConsole("No leader");
			announced = true;
			break;
		}

		JoinLoop2:
		for (i = 0; i < 5; i += 1) {
			for (j = 0; j < leader.length; j += 1) {
				Starter.joinInfo = {};

				D2Bot.requestGame(leader[j]);
				delay(100);

				if (Object.keys(Starter.joinInfo).length && Starter.joinInfo.gameName !== "" && (lastGame.indexOf(Starter.joinInfo.gameName) === -1 || Starter.lastGameStatus === "pending")) {
					Control_1.JoinGameName.setText(Starter.joinInfo.gameName);
					Control_1.JoinGamePass.setText(Starter.joinInfo.gamePass);

					if (Starter.lastGameStatus === "pending" || (Starter.gameInfo.error && DataFile.getStats().gameName === Starter.joinInfo.gameName)) {
						D2Bot.printToConsole("Failed to join game");
						ControlAction.timeoutDelay("Join Delay", StarterConfig.JoinRetryDelay * 1000, joinCheck, leader[j]);
						D2Bot.updateRuns();
						D2Bot.requestGame(leader[j]);
						delay(200);

						if (!Starter.joinInfo.inGame) {
							Starter.lastGameStatus = "ready";

							break;
						}
					}

					if (!Starter.joinInfo.inGame) {
						continue;
					}

					// Don't join immediately after previous game to avoid FTJ
					if (getTickCount() - lastGameTick < 5000) {
						ControlAction.timeoutDelay("Game Delay", (lastGameTick - getTickCount() + 5000));
					}

					print("joining game " + Starter.joinInfo.gameName);

					if (typeof AdvancedConfig[me.profile] === "object" && typeof AdvancedConfig[me.profile].JoinDelay === "number") {
						ControlAction.timeoutDelay("Custom Join Delay", AdvancedConfig[me.profile].JoinDelay * 1e3);
					}

					me.blockMouse = true;

					DataFile.updateStats("gameName", Starter.joinInfo.gameName);
					Control_1.JoinGame.click();

					me.blockMouse = false;

					lastGame.push(Starter.joinInfo.gameName);

					// Might need a fixed number. Right now it stores 1 game per leader.
					lastGame.length > leader.length && (lastGame.shift());

					Starter.lastGameStatus = "pending";
					Starter.locationTimeout(15000, location);

					break JoinLoop2;
				}
			}
		}

		break;
	case sdk.game.locations.Ladder:
		break;
	case sdk.game.locations.ChannelList:
		break;
	case sdk.game.locations.MainMenu:
		if (Profile().type === sdk.game.profiletype.TcpIpJoin) {
			Control_1.OtherMultiplayer.click();

			break;
		}
	// eslint-disable-next-line no-fallthrough
	case sdk.game.locations.Login:
	case sdk.game.locations.CharSelect:
	case sdk.game.locations.SplashScreen:
		// Wrong char select screen fix
		if (getLocation() === sdk.game.locations.CharSelect
			&& (Profile().type === sdk.game.profiletype.Battlenet && !Control_1.CharSelectCurrentRealm.control)
			|| ((Profile().type !== sdk.game.profiletype.Battlenet && Control_1.CharSelectCurrentRealm.control))) {
			Control_1.CharSelectExit.click();
			
			break;
		}

		// multiple realm botting fix in case of R/D or disconnect
		if (Starter.firstLogin && getLocation() === sdk.game.locations.Login) {
			Control_1.CharSelectExit.click();
		}

		D2Bot.updateStatus("Logging In");

		try {
			login(me.profile);
		} catch (e) {
			if (getLocation() === sdk.game.locations.CharSelect && loginRetry < 2) {
				if (!ControlAction.findCharacter(Starter.profileInfo)) {
					// dead hardcore character on sp
					if (getLocation() === sdk.game.locations.OkCenteredErrorPopUp) {
						// Exit from that pop-up
						Control_1.OkCentered.click();
						D2Bot.printToConsole("Character died", 9);
						D2Bot.stop();
					} else {
						loginRetry++;
					}
				} else {
					login(me.profile);
				}
			} else {
				print(e + " " + getLocation());
			}
		}

		break;
	case sdk.game.locations.LoginError: // Login Error
		string = "";
		text = Control_1.LoginErrorText.getText();

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");

				break;
			case getLocaleString(5208):
				D2Bot.updateStatus("Invalid Account");
				D2Bot.printToConsole("Invalid Account");

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("Invalid CDKey");
				D2Bot.printToConsole("Invalid CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected");
				D2Bot.printToConsole("Disconnected");
				Control_1.LoginErrorOk.click();

				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}
			
			Control_1.LoginErrorOk.click();
	
			while (true) {
				delay(1000);
			}
		}

		break;
	case sdk.game.locations.LoginUnableToConnect: // Unable To Connect
		D2Bot.updateStatus("Unable To Connect");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		} else {
			connectFail = true;
		}

		Control_1.UnableToConnectOk.click();

		break;
	case sdk.game.locations.RealmDown: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!Control_1.CharSelectExit.click()) {
			break;
		}

		Starter.updateCount();
		ControlAction.timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
		D2Bot.CDKeyRD();

		if (Starter.gameInfo.switchKeys && !Starter.gameInfo.rdBlocker) {
			D2Bot.printToConsole("Realm Down - Changing CD-Key");
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			D2Bot.printToConsole("Realm Down - Restart");
			D2Bot.restart();
		}

		break;
	case sdk.game.locations.Disconnected: // Character Select - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		Control_1.OkCentered.click();

		break;
	case sdk.game.locations.CharSelectPleaseWait: // Character Select - Please Wait popup
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			Control_1.OkCentered.click();
		}

		break;
	case sdk.game.locations.LobbyLostConnection: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		Control_1.OkCentered.click();

		break;
	case sdk.game.locations.CdKeyInUse: // Login - Cdkey In Use
		D2Bot.printToConsole(Starter.gameInfo.mpq + " is in use by " + Control_1.LoginCdKeyInUseBy.getText(), 6);
		D2Bot.CDKeyInUse();

		if (Starter.gameInfo.switchKeys) {
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			Control_1.UnableToConnectOk.click();
		}

		break;
	case sdk.game.locations.SelectDifficultySP: // Single Player - Select Difficulty
		break;
	case sdk.game.locations.MainMenuConnecting: // Main Menu - Connecting
		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			Control_1.LoginCancelWait.click();
		}

		break;
	case sdk.game.locations.InvalidCdKey: // Login - Invalid Cdkey (classic or xpac)
		text = Control_1.LoginInvalidCdKey.getText();
		string = "";

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}
		}

		switch (string) {
		case getLocaleString(10914):
			D2Bot.printToConsole(Starter.gameInfo.mpq + " LoD key in use by " + Control_1.LoginCdKeyInUseBy.getText(), 6);
			D2Bot.CDKeyInUse();

			if (Starter.gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				Control_1.UnableToConnectOk.click();
				ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		default:
			if (Starter.gameInfo.switchKeys) {
				D2Bot.printToConsole("Invalid CD-Key");
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				Control_1.UnableToConnectOk.click();
				ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		}

		break;
	case sdk.game.locations.CharSelectConnecting: // Character Select - Connecting
	case sdk.game.locations.CharSelectNoChars: // Empty character screen
		string = "";
		text = Control_1.CharSelectError.getText();

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			if (string === getLocaleString(11161)) { // CDKey disabled from realm play
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}

		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			Control_1.CharSelectExit.click();
			Starter.gameInfo.rdBlocker && (D2Bot.restart());
		}

		break;
	case sdk.game.locations.ServerDown: // Server Down - not much to do but wait..
		break;
	case sdk.game.locations.LobbyPleaseWait: // Lobby - Please Wait
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			Control_1.OkCentered.click();
		}

		break;
	case sdk.game.locations.GameNameExists: // Lobby - Game Name Exists
		break;
	case sdk.game.locations.GatewaySelect: // Gateway Select
		Control_1.GatewayCancel.click();

		break;
	case sdk.game.locations.GameDoesNotExist: // Lobby - Game Does Not Exist
		D2Bot.printToConsole("Game doesn't exist");

		if (Starter.gameInfo.rdBlocker) {
			D2Bot.printToConsole(Starter.gameInfo.mpq + " is probably flagged.", 6);

			if (Starter.gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			}
		} else {
			Starter.locationTimeout(StarterConfig.GameDoesNotExistTimeout * 1e3, location);
		}

		Starter.lastGameStatus = "ready";

		break;
	case sdk.game.locations.GameIsFull:
		D2Bot.printToConsole("Game is full");
		Control_1.JoinGameWindow.click();
		lastGame.push(Starter.joinInfo.gameName);
		Starter.lastGameStatus = "ready";

		break;
	case sdk.game.locations.OtherMultiplayer:
		Profile().type === sdk.game.profiletype.TcpIpJoin ? Control_1.TcpIp.click() : Control_1.OtherMultiplayerCancel.click();

		break;
	case sdk.game.locations.TcpIp:
		Profile().type === sdk.game.profiletype.TcpIpJoin ? Control_1.TcpIpJoin.click() : Control_1.TcpIpCancel.click();

		break;
	case sdk.game.locations.TcpIpEnterIp: // Enter Host IP
		try {
			if (!leader) {
				leader = [];

				for (i in JoinSettings) {
					if (JoinSettings.hasOwnProperty(i) && typeof i === "string") {
						for (j = 0; j < JoinSettings[i].length; j += 1) {
							if (JoinSettings[i][j] === me.profile || JoinSettings[i][j] === "all") {
								leader.push(i);
							}
						}
					}
				}
			}

			mainLoop:
			for (i = 0; i < 3; i++) {
				for (j = 0; j < leader.length; j++) {
					D2Bot.requestGame(leader[j]);

					if (joinInfo && Starter.joinInfo.gameName !== "") {
						break mainLoop;
					}
				}
			}

			Control_1.IPAdress.setText(!!Starter.joinInfo ? Starter.joinInfo.gameName : "localhost");
			Control_1.IPAdressOk.click();
			login(me.profile);
		} catch (e) {
			print(e);
		}

		break;
	case sdk.game.locations.TcpIpUnableToConnect:
		D2Bot.updateStatus("Unable To Connect TCP/IP");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.TCPIPNoHostDelay * 1e3);

			connectFail = false;
		} else {
			connectFail = true;
		}

		Control_1.OkCentered.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main () {
	debugLog(me.profile);
	addEventListener('copydata', Starter.receiveCopyData);
	addEventListener('scriptmsg', Starter.scriptMsgEvent);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		delay(200);

		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, 10);
		}

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(Starter.profileInfo).length) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				if (!Starter.inGame) {
					print("ÿc4Updating Status");
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					Starter.gameStart = getTickCount();

					DataFile.updateStats("runs", Starter.gameCount);
				}

				D2Bot.updateStatus("Game: " + me.gamename + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		locationAction();
		delay(1000);
	}
}
