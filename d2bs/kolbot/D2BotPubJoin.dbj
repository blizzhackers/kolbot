/**
*  @filename    D2BotPubJoin.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for following public games
*
*  @typedef {import("./sdk/globals")}
*/

include("critical.js"); // required
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// D2BotPubJoin specific settings - for global settings see libs/starter/StarterConfig.js
Starter.Config.MinGameTime = 0; // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
Starter.Config.ResetCount = 0; // Reset game count back to 1 every X games.
Starter.Config.JoinDelay = 10; // Seconds to wait between join attempts
Starter.Config.AttemptNextGame = true; // after joining a game, attempt incrementing game count and joining next game rather than looking for it in game list
Starter.Config.AttemptNextGameRetrys = 5;
Starter.Config.MinPlayers = 1; // Minimum players in game to join
const {
  includeFilter,
  excludeFilter
} = require("./libs/systems/pubjoin/PubJoinConfig");

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// ###############################################################################

// the only things we really need from these are their oog checks
includeSystemLibs();

const Overrides = require("./modules/Override");

if (typeof Starter.AdvancedConfig[me.profile] === "object") {
  Object.assign(Starter.Config, Starter.AdvancedConfig[me.profile]);
}
delete Starter.AdvancedConfig;

new Overrides.Override(Starter, Starter.setNextGame, function (orignal, gameName) {
  function incrementString (text) {
    return text.replace(/(\d*)$/, (_, t) => (+t + 1).toString().padStart(t.length, 0));
  }

  let nextGame = (gameName || Starter.randomString(null, true));
  nextGame = incrementString(nextGame);

  DataFile.updateStats("nextGame", nextGame);
}).apply();

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
  Starter.firstRun = true;
}

let lastGameTick, retry = 0;
let retryTick = 0;

const locationAction = (function () {
  let gameToJoin, doneGames, gameList;

  const Controls = require("./libs/modules/Control");
  const {
    locations,
    addLocations
  } = require("./libs/oog/Locations");
  
  /** @param {string} game */
  const includeCheck = function (game) {
    // No filters
    if (!includeFilter.length) return true;

    for (let filterSet of includeFilter) {
      let conditionsMatched = true;

      for (let condition of filterSet) {
        // Break the inner loop if an element didn't match or if an element is invalid
        if (!condition || !game.match(condition, "gi")) {
          conditionsMatched = false;
          break;
        }
      }

      // All elements matched
      if (conditionsMatched) {
        return true;
      }
    }

    return false;
  };

  /** @param {string} game */
  const excludeCheck = function (game) {
    // No filters
    if (!excludeFilter.length) return true;

    for (let filterSet of excludeFilter) {
      let conditionsMatched = true;

      for (let condition of filterSet) {
        // Break the inner loop if an element didn't match or if an element is invalid
        if (!condition || !game.match(condition, "gi")) {
          conditionsMatched = false;
          break;
        }
      }

      // All elements matched
      if (conditionsMatched) {
        return false;
      }
    }

    return true;
  };

  locations.set(sdk.game.locations.Lobby,
    function () {
      D2Bot.updateStatus("Lobby");

      me.blockKeys = false;
      Starter.loginRetry = 0;
      !Starter.firstLogin && (Starter.firstLogin = true);
      Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);
      Starter.loginFail = 0;

      if (Starter.Config.PingQuitDelay && Starter.pingQuit) {
        ControlAction.timeoutDelay("Ping Delay", Starter.Config.PingQuitDelay * 1e3);

        Starter.pingQuit = false;
      }

      if (Starter.inGame || Starter.gameInfo.error) {
        !Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

        if (getTickCount() - Starter.gameStart < Starter.Config.MinGameTime * 1e3) {
          ControlAction.timeoutDelay(
            "Min game time wait",
            Starter.Config.MinGameTime * 1e3 + Starter.gameStart - getTickCount()
          );
        }
      }

      if (Starter.inGame) {
        if (AutoMule.outOfGameCheck()
          || TorchSystem.outOfGameCheck()
          || Gambling.outOfGameCheck()
          || CraftingSystem.outOfGameCheck()) {
          return;
        }

        print("updating runs");
        D2Bot.updateRuns();

        lastGameTick = getTickCount();
        Starter.gameCount += 1;
        Starter.lastGameStatus = "ready";
        Starter.inGame = false;

        if (Starter.Config.ResetCount && Starter.gameCount >= Starter.Config.ResetCount) {
          Starter.gameCount = 1;
          DataFile.updateStats("runs", Starter.gameCount);
        }
      }

      Starter.LocationEvents.openJoinGameWindow();
    }
  );
  addLocations([sdk.game.locations.WaitingInLine, sdk.game.locations.CreateGame],
    function () {
      Controls.CancelCreateGame.click();
      Controls.JoinGameWindow.click();
    }
  );
  addLocations(
    [
      sdk.game.locations.LobbyChat, sdk.game.locations.CreateGame,
      sdk.game.locations.Ladder, sdk.game.locations.ChannelList
    ],
    function () {
      Starter.LocationEvents.openJoinGameWindow();
    }
  );
  locations.set(sdk.game.locations.JoinGame,
    function (location) {
      // Don't join immediately after previous game to avoid FTJ
      if (getTickCount() - lastGameTick < 5000) {
        ControlAction.timeoutDelay("Game Delay", (lastGameTick - getTickCount() + 5000));
      }

      if (Starter.Config.AttemptNextGame && retry < Starter.Config.AttemptNextGameRetrys) {
        let ng = DataFile.getStats().nextGame;

        if (ng && (retry === 0 || (getTickCount() - retryTick > Starter.Config.JoinDelay * 1e3))) {
          gameToJoin = ng;
          console.debug(gameToJoin);

          me.blockMouse = true;

          try {
            joinGame(gameToJoin, "");
          } catch (joinErr) {
            print(joinErr);
          }

          retry++;
          retryTick = getTickCount();
          me.blockMouse = false;

          Starter.locationTimeout(5000, location);

          if (getLocation() === sdk.game.locations.GameDoesNotExist) {
            Starter.LocationEvents.openJoinGameWindow();
          }
        }
      }

      for (let i = 0; i < 5; i += 1) {
        gameList = ControlAction.getGameList();

        if (gameList && gameList.length > 0) {
          break;
        }

        delay(1000);
      }

      if (gameList) {
        doneGames = [];
        gameToJoin = false;
        if (FileTools.exists("logs/doneGames.json")) {
          doneGames = JSON.parse(FileAction.read("logs/doneGames.json"));
        }

        gameList
          .sort(function (a, b) {
            return b.players - a.players;
          });

        for (let { gameName, players } of gameList) {
          if (players < Starter.Config.MinPlayers) continue;
          if (doneGames.indexOf(gameName) === -1
            && includeCheck(gameName)
            && excludeCheck(gameName)) {
            console.log("Ã¿c7Game: " + gameName + ", Players: " + players);
            gameToJoin = gameName;

            break;
          }
        }

        if (gameToJoin) {
          doneGames.length >= 20 && doneGames.shift();
          doneGames.push(gameToJoin);
          FileAction.write("logs/doneGames.json", JSON.stringify(doneGames));

          me.blockMouse = true;

          try {
            joinGame(gameToJoin, "");
          } catch (joinErr) {
            print(joinErr);
          }

          me.blockMouse = false;

          Starter.locationTimeout(5000, location);
        }
      }
    }
  );
  locations.set(sdk.game.locations.SelectDifficultySP,
    function () {
      hideConsole();
      sendKey(sdk.keys.Escape);
    }
  );
  addLocations([sdk.game.locations.GameNameExists, sdk.game.locations.GameIsFull],
    function () {
      Controls.CreateGameWindow.click();
      Starter.gameCount += 1;
      Starter.lastGameStatus = "ready";
    }
  );
  locations.set(sdk.game.locations.TcpIp,
    function () {
      Controls.TcpIpCancel.click();
    }
  );

  return {
    /** @param {number} loc */
    run: function (loc) {
      try {
        let func = locations.get(loc);
        if (typeof func === "function") {
          func(loc);
        } else if (loc !== undefined && loc !== null) {
          console.log("Unhandled location: " + loc);
        }
      } catch (e) {
        console.error(e);
      }
    },
  };
})();

function main () {
  debugLog(me.profile);
  addEventListener("copydata", Starter.receiveCopyData);
  addEventListener("scriptmsg", Starter.scriptMsgEvent);

  while (!Starter.handle) {
    delay(100);
  }

  DataFile.updateStats("handle", Starter.handle);
  delay(500);
  D2Bot.init();
  load("threads/heartbeat.js");

  while (!Object.keys(Starter.gameInfo).length) {
    D2Bot.requestGameInfo();
    delay(500);
  }

  Starter.gameCount = (DataFile.getStats().runs + 1 || 1);
  DataFile.updateStats("nextGame", "");

  if (Starter.gameInfo.error) {
    D2Bot.retrieve();
    delay(200);

    if (Starter.gameInfo.crashInfo) {
      D2Bot.printToConsole(
        "Crash Info: Script: " + Starter.gameInfo.crashInfo.currScript
        + " Area: " + Starter.gameInfo.crashInfo.area,
        sdk.colors.D2Bot.Gray
      );
    }

    ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
    D2Bot.updateRuns();
  }

  D2Bot.store(JSON.stringify({ currScript: "none", area: "out of game" }));

  while (!Object.keys(Starter.profileInfo).length) {
    D2Bot.getProfile();
    print("Getting Profile");
    delay(500);
  }

  while (true) {
    // returns true before actually in game so we can't only use this check
    while (me.ingame) {
      // returns false when switching acts so we can't use while
      if (me.gameReady) {
        Starter.isUp = "yes";

        if (!Starter.inGame) {
          Starter.gameStart = getTickCount();

          print("Updating Status");

          Starter.lastGameStatus = "ingame";
          Starter.inGame = true;
          retry = 0;
          retryTick = 0;

          DataFile.updateStats("runs", Starter.gameCount);
          DataFile.updateStats("ingameTick");
          Starter.setNextGame(me.gamename);
        }

        D2Bot.updateStatus(
          me.charname + " (" + me.charlvl + ") | Game: " + (me.gamename || "singleplayer")
          + Starter.timer(Starter.gameStart)
        );
      }

      delay(1000);
    }

    Starter.isUp = "no";

    locationAction.run(getLocation());
    delay(1000);
  }
}
