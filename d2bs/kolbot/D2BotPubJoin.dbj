include("StarterConfig.js");

// D2BotPubJoin settings
StarterConfig.MinGameTime = 0; // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
StarterConfig.ResetCount = 0; // Reset game count back to 1 every X games.

// Override default values for StarterConfig under here by following format
// StarterConfig.ValueToChange = value; // Example: StarterConfig.MinGameTime = 500; // changes MinGameTime to 500 seconds

/**
	IncludeFilter config:

	Multiple entries in the same array mean AND:
	["baal", "-"] = game has to contain "baal" and "-"

	Different entries mean OR:
	["baal"],
	["diablo"]
	will join games with either "baal" or "diablo" in their name

	Similar rules apply to ExcludeFilter:

	["somebaal", "-"] ignores games with "somebaal" and "-" in the game name

	["somebaal"],
	["somediablo"]
	this will ignore all games with "somebaal" or "somediablo" in their names
*/

const IncludeFilter = [
	[""]
];

const ExcludeFilter = [
	[""]
];

// ###############################################################################

function includeCheck (game) {
	// No filters
	if (!IncludeFilter.length) return true;

	for (let i = 0; i < IncludeFilter.length; i += 1) {
		let j;
		for (j = 0; j < IncludeFilter[i].length; j += 1) {
			// Break the inner loop if an element didn't match or if an element is invalid
			if (!IncludeFilter[i][j] || !game.match(IncludeFilter[i][j], "gi")) {
				break;
			}
		}

		// All elements matched
		if (j === IncludeFilter[i].length) {
			return true;
		}
	}

	return false;
}

function excludeCheck (game) {
	// No filters
	if (!ExcludeFilter.length) return true;

	for (let i = 0; i < ExcludeFilter.length; i += 1) {
		let j;
		for (j = 0; j < ExcludeFilter[i].length; j += 1) {
			// Break the inner loop if an element didn't match or if an element is invalid
			if (!ExcludeFilter[i][j] || !game.match(ExcludeFilter[i][j], "gi")) {
				break;
			}
		}

		// All elements matched
		if (j === ExcludeFilter[i].length) {
			return false;
		}
	}

	return true;
}

// No touchy!
include("json2.js");
include('polyfill.js');
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("common/misc.js");
include("common/util.js");
let Controls = require('./modules/Control');
let sdk = require('./modules/sdk');

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	Starter.firstRun = true;
}

let lastGameTick;

function locationAction (location) {
	let i, gameToJoin, doneGames, gameList;

	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();

		break;
	case sdk.game.locations.Lobby:
		D2Bot.updateStatus("Lobby");

		me.blockKeys = false;
		loginRetry = 0;
		!Starter.firstLogin && (Starter.firstLogin = true);
		Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);
		loginFail = 0;

		if (StarterConfig.PingQuitDelay && Starter.pingQuit) {
			ControlAction.timeoutDelay("Ping Delay", StarterConfig.PingQuitDelay * 1e3);

			Starter.pingQuit = false;
		}

		if (Starter.inGame || Starter.gameInfo.error) {
			!Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

			if (getTickCount() - Starter.gameStart < StarterConfig.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("Min game time wait", StarterConfig.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			lastGameTick = getTickCount();
			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			if (StarterConfig.ResetCount && Starter.gameCount >= StarterConfig.ResetCount) {
				Starter.gameCount = 1;
				DataFile.updateStats("runs", Starter.gameCount);
			}
		}

		LocationEvents.openJoinGameWindow();

		break;
	case sdk.game.locations.WaitingInLine:
		Controls.CancelCreateGame.click();
		Controls.JoinGameWindow.click();

		break;
	case sdk.game.locations.LobbyChat:
	case sdk.game.locations.CreateGame:
	case sdk.game.locations.Ladder:
	case sdk.game.locations.ChannelList:
		LocationEvents.openJoinGameWindow();

		break;
	case sdk.game.locations.JoinGame: // Join Game
		// Don't join immediately after previous game to avoid FTJ
		if (getTickCount() - lastGameTick < 5000) {
			ControlAction.timeoutDelay("Game Delay", (lastGameTick - getTickCount() + 5000));
		}

		for (i = 0; i < 5; i += 1) {
			gameList = ControlAction.getGameList();

			if (gameList && gameList.length > 0) {
				break;
			}

			delay(1000);
		}

		if (gameList) {
			doneGames = [];
			gameToJoin = false;

			if (FileTools.exists("logs/doneGames.json")) {
				doneGames = JSON.parse(Misc.fileAction("logs/doneGames.json", 0));
			}

			gameList.sort(function (a, b) {
				return b.players - a.players;
			});

			for (i = 0; i < gameList.length; i += 1) {
				if (doneGames.indexOf(gameList[i].gameName) === -1 && includeCheck(gameList[i].gameName) && excludeCheck(gameList[i].gameName)) {
					print("Ã¿c7Game: " + gameList[i].gameName + ", Players: " + gameList[i].players);

					gameToJoin = gameList[i].gameName;

					break;
				}
			}

			if (gameToJoin) {
				if (doneGames.length >= 20) {
					doneGames.shift();
				}

				doneGames.push(gameToJoin);
				Misc.fileAction("logs/doneGames.json", 1, JSON.stringify(doneGames));

				me.blockMouse = true;

				try {
					joinGame(gameToJoin, "");
				} catch (joinErr) {
					print(joinErr);
				}

				me.blockMouse = false;

				Starter.locationTimeout(5000, location);
			}
		}

		break;
	case sdk.game.locations.MainMenu:
	case sdk.game.locations.SplashScreen:
	case sdk.game.locations.Login:
	case sdk.game.locations.CharSelect:
		LocationEvents.login();

		break;
	case sdk.game.locations.LoginError:
	case sdk.game.locations.InvalidCdKey:
	case sdk.game.locations.CdKeyInUse:
		LocationEvents.loginError();

		break;
	case sdk.game.locations.LoginUnableToConnect:
	case sdk.game.locations.TcpIpUnableToConnect:
		LocationEvents.unableToConnect();

		break;
	case sdk.game.locations.RealmDown:
		LocationEvents.realmDown();

		break;
	case sdk.game.locations.Disconnected:
	case sdk.game.locations.LobbyLostConnection:
		D2Bot.updateStatus("Disconnected/LostConnection");
		delay(1000);
		Controls.OkCentered.click();

		break;
	case sdk.game.locations.CharSelectPleaseWait:
		!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.SelectDifficultySP: // Single Player - Select Difficulty
		break;
	case sdk.game.locations.MainMenuConnecting:
		!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location) && Controls.LoginCancelWait.click();

		break;
	case sdk.game.locations.CharSelectConnecting:
	case sdk.game.locations.CharSelectNoChars:
		LocationEvents.charSelectError();

		break;
	case sdk.game.locations.ServerDown:
		break;
	case sdk.game.locations.LobbyPleaseWait:
		!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.GameNameExists:
	case sdk.game.locations.GameIsFull:
		Controls.CreateGameWindow.click();
		Starter.gameCount += 1;
		Starter.lastGameStatus = "ready";

		break;
	case sdk.game.locations.GatewaySelect:
		Controls.GatewayCancel.click();

		break;
	case sdk.game.locations.GameDoesNotExist:
		LocationEvents.gamneDoesNotExist();

		break;
	case sdk.game.locations.CharacterCreate:
		Controls.CharSelectExit.click();

		break;
	case sdk.game.locations.OtherMultiplayer:
		LocationEvents.otherMultiplayerLogin();

		break;
	case sdk.game.locations.TcpIp:
		Profile().type === sdk.game.profiletype.TcpIpHost ? Controls.TcpIpHost.click() : Controls.TcpIpCancel.click();

		break;
	case sdk.game.locations.TcpIpEnterIp:
		Controls.TcpIpCancel.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main() {
	debugLog(me.profile);
	addEventListener('copydata', Starter.receiveCopyData);
	addEventListener('scriptmsg', Starter.scriptMsgEvent);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		D2Bot.retrieve();
		delay(200);

		if (Starter.gameInfo.crashInfo) {
			D2Bot.printToConsole("Crash Info: Script: " + Starter.gameInfo.crashInfo.currScript + " Area: " + Starter.gameInfo.crashInfo.area, 10);
		}

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	D2Bot.store(JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(Starter.profileInfo).length) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				Starter.isUp = "yes";

				if (!Starter.inGame) {
					Starter.gameStart = getTickCount();

					print("Updating Status");

					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;

					DataFile.updateStats("runs", Starter.gameCount);
					DataFile.updateStats("ingameTick");
				}

				D2Bot.updateStatus("Game: " + me.gamename + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		Starter.isUp = "no";

		locationAction(getLocation());
		delay(1000);
	}
}
