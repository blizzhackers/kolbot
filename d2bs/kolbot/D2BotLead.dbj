/* eslint-disable no-fallthrough */
/**
*  @filename    D2BotLead.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for leader
*
*  @typedef {import("./sdk/globals")}
*/

include("critical.js"); // required
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// - for global settings @see libs/starter/StarterConfig.js
// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// the only things we really need from these are their oog checks
includeSystemLibs();

const Controls = require("./libs/modules/Control");

if (typeof Starter.AdvancedConfig[me.profile] === "object") {
  Object.assign(Starter.Config, Starter.AdvancedConfig[me.profile]);
}
delete Starter.AdvancedConfig;

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
  Starter.firstRun = true;
}

const locationAction = (function () {
  const {
    locations,
  } = require("./libs/oog/Locations");

  return {
    /** @param {number} loc */
    run: function (loc) {
      try {
        let func = locations.get(loc);
        if (typeof func === "function") {
          func(loc);
        } else if (loc !== undefined && loc !== null) {
          console.log("Unhandled location: " + loc);
        }
      } catch (e) {
        console.error(e);
      }
    },
  };
})();

function main () {
  debugLog(me.profile);

  const Worker = require("./libs/modules/Worker");
  Worker.runInBackground.copyData = (function () {
    const workBench = [];
    addEventListener("copydata", function (mode, msg) {
      workBench.push({ mode: mode, msg: msg });
    });

    return function () {
      if (!workBench.length) return true;

      while (workBench.length) {
        const { mode, msg } = workBench.shift();
        Starter.receiveCopyData(mode, msg);
      }

      return true;
    };
  })();
  // addEventListener("copydata", Starter.receiveCopyData);
  addEventListener("scriptmsg", Starter.scriptMsgEvent);

  while (!Starter.handle) {
    delay(100);
  }

  DataFile.updateStats("handle", Starter.handle);
  delay(500);
  D2Bot.init();
  load("threads/heartbeat.js");

  while (!Object.keys(Starter.gameInfo).length) {
    D2Bot.requestGameInfo();
    delay(500);
  }

  while (!Object.keys(Starter.profileInfo).length) {
    D2Bot.getProfile();
    console.log("Getting Profile");
    delay(500);
  }

  Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

  if (Starter.gameInfo.error) {
    delay(200);

    if (!!DataFile.getStats().debugInfo) {
      Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;
      D2Bot.printToConsole(
        "Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript
        + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area,
        sdk.colors.D2Bot.Gray
      );
    }

    ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
    D2Bot.updateRuns();
  }

  DataFile.updateStats("debugInfo", JSON.stringify({ currScript: "none", area: "out of game" }));
  while (true) {
    // returns true before actually in game so we can't only use this check
    while (me.ingame) {
      // returns false when switching acts so we can't use while
      if (me.gameReady) {
        Starter.isUp = "yes";

        if (!Starter.inGame) {
          Starter.gameStart = getTickCount();
          Starter.lastGameStatus = "ingame";
          Starter.inGame = true;

          DataFile.updateStats(["runs", "ingameTick", "currentGame"], Starter.gameCount);
        }

        D2Bot.updateStatus(
          me.charname + " (" + me.charlvl + ") | Game: " + (me.gamename || "singleplayer")
          + Starter.timer(Starter.gameStart)
        );
      }

      delay(1000);
    }

    Starter.isUp = "no";

    locationAction.run(getLocation());
    delay(1000);
  }
}
