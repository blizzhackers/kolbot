/* eslint-disable no-fallthrough */
/**
*  @filename    D2BotLead.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for leader
*
*/
include("StarterConfig.js");

// - for global settings see libs/StarterConfig.js
// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// No touchy!
include("json2.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("Polyfill.js");
include("common/misc.js");
include("common/util.js");
let sdk = require("./modules/sdk");
let Controls = require("./modules/Control");

if (typeof AdvancedConfig[me.profile] === "object") {
	Object.assign(Starter.Config, AdvancedConfig[me.profile]);
}

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	Starter.firstRun = true;
}

function locationAction (location) {
	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();
		Starter.locationTimeout(5000, location);
		getLocation() === sdk.game.locations.PreSplash && sendKey(0x0D);

		break;
	case sdk.game.locations.Lobby:
		D2Bot.updateStatus("Lobby");

		me.blockKeys = false;
		Starter.loginRetry = 0;
		!Starter.firstLogin && (Starter.firstLogin = true);
		Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);

		if (Starter.Config.PingQuitDelay && Starter.pingQuit) {
			ControlAction.timeoutDelay("Ping Delay", Starter.Config.PingQuitDelay * 1e3);
			Starter.pingQuit = false;
		}

		if (Starter.Config.JoinChannel !== "" || (AdvancedConfig[me.profile] && AdvancedConfig[me.profile].JoinChannel !== "")) {
			Controls.LobbyEnterChat.click();

			break;
		}

		if (Starter.inGame || Starter.gameInfo.error) {
			!Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

			if (getTickCount() - Starter.gameStart < Starter.Config.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("Min game time wait", Starter.Config.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			if (Starter.Config.ResetCount && Starter.gameCount > Starter.Config.ResetCount) {
				Starter.gameCount = 1;
				DataFile.updateStats("runs", Starter.gameCount);
			}
		}

		Starter.LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.WaitingInLine:
		Starter.LocationEvents.waitingInLine();

		break;
	case sdk.game.locations.LobbyChat:
		D2Bot.updateStatus("Lobby Chat");
		Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);

		if (Starter.inGame || Starter.gameInfo.error) {
			!Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

			if (getTickCount() - Starter.gameStart < Starter.Config.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("Min game time wait", Starter.Config.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			if (Starter.Config.ResetCount && Starter.gameCount > Starter.Config.ResetCount) {
				Starter.gameCount = 1;
				DataFile.updateStats("runs", Starter.gameCount);
			}

			if (AdvancedConfig[me.profile] && AdvancedConfig[me.profile].hasOwnProperty("AfterGameMessage")) {
				Starter.chanInfo.afterMsg = AdvancedConfig[me.profile].AfterGameMessage;
			} else {
				Starter.chanInfo.afterMsg = Starter.Config.AfterGameMessage;
			}

			// check that we are in the channel we are supposed to be in
			if (Starter.chanInfo.joinChannel.length) {
				let chanName = Controls.LobbyChannelName.getText();
				chanName && (chanName = chanName.toString());
				chanName && (chanName = chanName.slice(0, chanName.indexOf("(") - 1));
				Starter.chanInfo.joinChannel.indexOf(chanName) === -1 && (Starter.chatActionsDone = false);
			}

			if (Starter.chanInfo.afterMsg) {
				if (typeof Starter.chanInfo.afterMsg === "string") {
					Starter.chanInfo.afterMsg = [Starter.chanInfo.afterMsg];
				}

				for (let i = 0; i < Starter.chanInfo.afterMsg.length; i += 1) {
					Starter.sayMsg(Starter.chanInfo.afterMsg[i]);
					delay(500);
				}
			}
		}

		if (!Starter.chatActionsDone) {
			Starter.chatActionsDone = true;

			if (AdvancedConfig[me.profile] && AdvancedConfig[me.profile].hasOwnProperty("JoinChannel")) {
				Starter.chanInfo.joinChannel = AdvancedConfig[me.profile].JoinChannel;
			} else {
				Starter.chanInfo.joinChannel = Starter.Config.JoinChannel;
			}

			if (AdvancedConfig[me.profile] && AdvancedConfig[me.profile].hasOwnProperty("FirstJoinMessage")) {
				Starter.chanInfo.firstMsg = AdvancedConfig[me.profile].FirstJoinMessage;
			} else {
				Starter.chanInfo.firstMsg = Starter.Config.FirstJoinMessage;
			}

			if (Starter.chanInfo.joinChannel) {
				typeof Starter.chanInfo.joinChannel === "string" && (Starter.chanInfo.joinChannel = [Starter.chanInfo.joinChannel]);
				typeof Starter.chanInfo.firstMsg === "string" && (Starter.chanInfo.firstMsg = [Starter.chanInfo.firstMsg]);

				for (let i = 0; i < Starter.chanInfo.joinChannel.length; i += 1) {
					ControlAction.timeoutDelay("Chat delay", Starter.Config.ChatActionsDelay * 1e3);

					if (ControlAction.joinChannel(Starter.chanInfo.joinChannel[i])) {
						Starter.useChat = true;
					} else {
						print("Ã¿c1Unable to join channel, disabling chat messages.");
						Starter.useChat = false;
					}

					if (Starter.chanInfo.firstMsg[i] !== "") {
						Starter.sayMsg(Starter.chanInfo.firstMsg[i]);
						delay(500);
					}
				}
			}
		}

		// Announce game
		if (AdvancedConfig[me.profile] && AdvancedConfig[me.profile].hasOwnProperty("AnnounceGames")) {
			Starter.chanInfo.announce = AdvancedConfig[me.profile].AnnounceGames;
		} else {
			Starter.chanInfo.announce = Starter.Config.AnnounceGames;
		}

		Starter.LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.CreateGame:
		D2Bot.updateStatus("Creating Game");

		if (typeof Starter.Config.CharacterDifference === "number") {
			Controls.CharacterDifference.disabled === sdk.game.controls.Disabled && Controls.CharacterDifferenceButton.click();
			Controls.CharacterDifference.setText(Starter.Config.CharacterDifference.toString());
		} else if (!Starter.Config.CharacterDifference && Controls.CharacterDifference.disabled === 5) {
			Controls.CharacterDifferenceButton.click();
		}

		typeof Starter.Config.MaxPlayerCount === "number" && Controls.MaxPlayerCount.setText(Starter.Config.MaxPlayerCount.toString());

		// Get game name if there is none
		while (!Starter.gameInfo.gameName) {
			D2Bot.requestGameInfo();
			delay(500);
		}

		// FTJ handler
		if (Starter.lastGameStatus === "pending") {
			Starter.isUp = "no";
			D2Bot.printToConsole("Failed to create game");
			ControlAction.timeoutDelay("FTJ delay", Starter.Config.FTJDelay * 1e3);
			D2Bot.updateRuns();
		}

		let gameName = (Starter.gameInfo.gameName === "?" ? Starter.randomString(null, true) : Starter.gameInfo.gameName + Starter.gameCount);
		let gamePass = (Starter.gameInfo.gamePass === "?" ? Starter.randomString(null, true) : Starter.gameInfo.gamePass);

		ControlAction.createGame(gameName, gamePass, Starter.gameInfo.difficulty, Starter.Config.CreateGameDelay * 1000);

		Starter.lastGameStatus = "pending";
		Starter.setNextGame(Starter.gameInfo);
		Starter.locationTimeout(10000, location);

		break;
	case sdk.game.locations.JoinGame:
	case sdk.game.locations.Ladder:
	case sdk.game.locations.ChannelList:
		Starter.LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.MainMenu:
	case sdk.game.locations.SplashScreen:
	case sdk.game.locations.Login:
	case sdk.game.locations.CharSelect:
		Starter.LocationEvents.login([sdk.game.gametype.TcpIpHost, sdk.game.profiletype.OpenBattlenet].includes(Profile().type));

		break;
	case sdk.game.locations.LoginError:
	case sdk.game.locations.InvalidCdKey:
	case sdk.game.locations.CdKeyInUse:
		Starter.LocationEvents.loginError();

		break;
	case sdk.game.locations.LoginUnableToConnect:
	case sdk.game.locations.TcpIpUnableToConnect:
		Starter.LocationEvents.unableToConnect();

		break;
	case sdk.game.locations.RealmDown:
		Starter.LocationEvents.realmDown();

		break;
	case sdk.game.locations.Disconnected:
	case sdk.game.locations.LobbyLostConnection:
		D2Bot.updateStatus("Disconnected/LostConnection");
		delay(1000);
		Controls.OkCentered.click();

		break;
	case sdk.game.locations.CharSelectPleaseWait:
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.SelectDifficultySP:
		Starter.LocationEvents.selectDifficultySP();

		break;
	case sdk.game.locations.MainMenuConnecting:
		!Starter.locationTimeout(Starter.Config.ConnectingTimeout * 1e3, location) && Controls.LoginCancelWait.click();

		break;
	case sdk.game.locations.CharSelectConnecting:
	case sdk.game.locations.CharSelectNoChars:
		Starter.LocationEvents.charSelectError();

		break;
	case sdk.game.locations.ServerDown:
		break;
	case sdk.game.locations.LobbyPleaseWait:
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.GameNameExists:
	case sdk.game.locations.GameIsFull:
		Controls.CreateGameWindow.click();
		Starter.gameCount += 1;
		Starter.lastGameStatus = "ready";

		break;
	case sdk.game.locations.GatewaySelect:
		Controls.GatewayCancel.click();

		break;
	case sdk.game.locations.GameDoesNotExist:
		Starter.LocationEvents.gameDoesNotExist();

		break;
	case sdk.game.locations.CharacterCreate:
		Controls.CharSelectExit.click();

		break;
	case sdk.game.locations.OtherMultiplayer:
		Starter.LocationEvents.otherMultiplayerSelect();

		break;
	case sdk.game.locations.TcpIp:
		Profile().type === sdk.game.profiletype.TcpIpHost ? Controls.TcpIpHost.click() : Controls.TcpIpCancel.click();

		break;
	case sdk.game.locations.TcpIpEnterIp:
		Controls.TcpIpCancel.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main () {
	debugLog(me.profile);
	addEventListener("copydata", Starter.receiveCopyData);
	addEventListener("scriptmsg", Starter.scriptMsgEvent);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (Starter.gameInfo.error) {
		delay(200);

		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;
			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, sdk.colors.D2Bot.Gray);
		}

		ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!Object.keys(Starter.profileInfo).length) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				Starter.isUp = "yes";

				if (!Starter.inGame) {
					Starter.gameStart = getTickCount();
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;

					DataFile.updateStats("runs", Starter.gameCount);
					DataFile.updateStats("ingameTick");
				}

				D2Bot.updateStatus(Starter.profileInfo.charName + " | Game: " + (me.gamename || "singleplayer") + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		Starter.isUp = "no";

		locationAction(getLocation());
		delay(1000);
	}
}
