/**
*  @filename    D2BotCleaner.dbj
*  @author      theBGuy
*  @credits     Whoever did the original D2BotAccountCleaner.dbj
*  @desc        The purpose of this entryscript is to clean/remove characters and/or files easily
*
*/
include("StarterConfig.js");

// D2BotCleaner settings
// New Stuff - DataCleaner to delete old files associated with running kolbot or SoloPlay
// SaveFiles - to save important SoloPlay files to SoloPlay/Data/ for performance review
//***********************************************************************************************************************//
//	DataCleaner and SaveFiles can both be used for cleaning/saving files without having to delete associated characters  //
//***********************************************************************************************************************//
Starter.Config.DataCleaner = true; // Always run this when re-using a profile with Kolbot-SoloPlay
Starter.Config.SaveFiles = false; // NOTE: Only works on SoloPlay profiles, Highly recommened to run this if using the peformance tracking system and wish to review them later

// Old Stuff
Starter.Config.DelayBetweenAccounts = rand(15, 30); //Seconds to wait before cleaning next account, if doing 10+ accounts recommended to increase this delay to rand(30, 60) prevent R/D

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

const AccountsToClean = {
	/* Format:
		"account1/password1/realm": ["charname1", "charname2"],
		"account2/password2/realm": ["charnameX", "charnameY"],
		"account3/password3/realm": ["all"]

		To clean a full account, put "account/password/realm": ["all"]

		realm = useast, uswest, europe, asia

		for singleplayer follow format "singleplayer": ["charname1", "charname2"]

		Individual entries are separated with a comma.
	*/

	/*	Example:
		"MyAcc1/tempPass/useast": ["soloSorc"],
		"singleplayer": ["solobarb"],
	*/

	// Enter your lines under here

};

const CharactersToExclude = [""];
	
// NEW STUFF - Please enter your profile name exactly as is
const profiles = [
	/* Format. Enter in profile exactly the way it appears in D2Bot#
		"SCL-ZON123",
		"hcnl-pal123",
	*/
	// Enter your lines under here

];

/*
	If you have a lot of profiles that are clones this can be used as an easier way to clean all of them
	{
		profilePrefix: this is everthing before the suffix numbers. Ex: mypal01 or sccl-pal-001, ect
		profileSuffixStart: this is the suffix to start at, Ex: 01 or 001 or 1, all the profiles need have the same format. CANNOT HAVE scl-pal-1 and scl-pal-001
		end: the ending profile suffix, this is used to stop the loop. If you are doing scl-pal-001 to scl-pal-100 (that'd be alot) then 100 would go here
	}
*/
const AdvancedProfileCleanerConfig = [
	// {
	// 	profilePrefix: "scl-sorc-",
	// 	profileSuffixStart: "002",
	// 	end: "009"
	// },
	// Your lines under here
];

/* Generate accounts to entirely clean ("all") 
	to use this, set generateAccounts to true and setup the rest of the parameters
	
	it will generates accounts from start to stop range(included) :
	account1/password/realm
	account2/password/realm
	etc...
*/

const AdvancedCleanerConfig = {
	generateAccounts: false,
	accountPrefix: "account",
	accountPassword: "password",
	accountRealm: "realm",
	rangeStart: 1,
	rangeStop: 10
};

// No touchy!
include("json2.js");
include("polyfill.js");
include("OOG.js");
include("common/misc.js");
include("common/prototypes.js");
include("common/util.js");
let sdk = require("./modules/sdk");
let Controls = require("./modules/Control");

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	Starter.firstRun = true;
}

let currAcc, charList, realm;
let firstAccount = true;
let accounts = [];
let chars = [];

function dataCleaner () {
	if (AdvancedProfileCleanerConfig.length) {
		let incrementString = function (text) {
			return text.replace(/(\d*)$/, (_, t) => (+t + 1).toString().padStart(t.length, 0));
		};

		AdvancedProfileCleanerConfig.forEach(p => {
			let curr = p.profilePrefix + p.profileSuffixStart;
			let end = p.profilePrefix + p.end;
			profiles.push(curr);
			while (curr !== end) {
				curr = incrementString(curr);
				profiles.push(curr);
			}
		});
	}
	if (!profiles.length) {
		D2Bot.printToConsole("D2BotCleaner: No profiles entered to clean. If this was a mistake, fill out profile information under NEW STUFF. Exiting dataCleaner and moving on to clean characters...", sdk.colors.D2Bot.Gold);
		return;
	}

	let charClass;
	let folder, j;
	let charClassMap = {"ZON": "amazon", "SOR": "sorceress", "NEC": "necromancer", "PAL": "paladin", "BAR": "barbarian", "DRU": "druid", "SIN": "assassin"};

	for (let i = 0; i < profiles.length; i++) {
		let buildCheck = profiles[i].toUpperCase().split("-");
		buildCheck[1] = buildCheck[1].toString().substring(0, 3).toUpperCase();
		let charType = buildCheck[0].includes("CC") ? "Classic" : "Expansion";
		let profileExists = false;
		let soloplayProfile = false;

		// Filepaths
		let dataFP = "data/" + profiles[i] + ".json";
		let gameTimeFP = "libs/SoloPlay/Data/" + profiles[i] + "/" + profiles[i] + "-GameTime" + ".json";
		let charDataFP = "libs/SoloPlay/Data/" + profiles[i] + "/" + profiles[i] + "-CharData" + ".json";
		let lvlPerfFP = "libs/SoloPlay/Data/" + profiles[i] + "/" + profiles[i] + "-LevelingPerformance" + ".csv";
		let scrPerfFP = "libs/SoloPlay/Data/" + profiles[i] + "/" + profiles[i] + "-ScriptPerformance" + ".csv";
		let savePath = "logs/"; // default value in case something goes wrong with assigning actual savePath

		if (charClassMap[buildCheck[1]]) {
			charClass = charClassMap[buildCheck[1]];
			soloplayProfile = true;
		} else {
			//D2Bot.printToConsole("D2BotCleaner: Failed to get charClass. Please check that your profile was entered correctly under NEW STUFF.", sdk.colors.D2Bot.Gold);
			//print("Invalid profile name, couldn't set character class");
			charClass = "undefined";
		}

		if (Starter.Config.SaveFiles && soloplayProfile) {
			if (FileTools.exists(dataFP) || FileTools.exists(gameTimeFP) || FileTools.exists(charDataFP) || FileTools.exists(lvlPerfFP) || FileTools.exists(scrPerfFP)) {
				// Create folder to copy files to
				if (!FileTools.exists("libs/SoloPlay/Data/" + charType)) {
					folder = dopen("libs/SoloPlay/Data");
					folder.create(charType);
				}

				if (!FileTools.exists("libs/SoloPlay/Data/" + charType + "/" + charClass)) {
					folder = dopen("libs/SoloPlay/Data/" + charType);
					folder.create(charClass);
				}

				let files = dopen("libs/SoloPlay/Data/" + charType + "/" + charClass + "/").getFolders();
				j = files.length + 1;

				// make sure folder doesn't already exist.
				while (FileTools.exists("libs/SoloPlay/Data/" + charType + "/" + charClass + "/" + j.toString())) {
					j++;
					delay(100);
				}

				if (!FileTools.exists("libs/SoloPlay/Data/" + charType + "/" + charClass + "/" + j.toString())) {
					folder = dopen("libs/SoloPlay/Data/" + charType + "/" + charClass);
					folder.create(j.toString());
				}

				savePath = "libs/SoloPlay/Data/" + charType + "/" + charClass + "/" + j.toString() + "/" + profiles[i];
				profileExists = true;
			}
		}
				
		if (FileTools.exists(dataFP)) {
			Starter.Config.SaveFiles && FileTools.copy(dataFP, savePath + "Old.json");
			FileTools.remove(dataFP);
			profileExists = true;
		}
		
		if (FileTools.exists(gameTimeFP)) {
			Starter.Config.SaveFiles && FileTools.copy(gameTimeFP, savePath + "-GameTimeOld.json");
			FileTools.remove(gameTimeFP);
		}

		if (FileTools.exists(charDataFP)) {
			Starter.Config.SaveFiles && FileTools.copy(charDataFP, savePath + "-CharDataOld.json");
			FileTools.remove(charDataFP);
		}
		
		if (FileTools.exists(lvlPerfFP)) {
			Starter.Config.SaveFiles && FileTools.copy(lvlPerfFP, savePath + "-LevelingPerformanceOld.csv");
			FileTools.remove(lvlPerfFP);
		}

		if (FileTools.exists(scrPerfFP)) {
			Starter.Config.SaveFiles && FileTools.copy(scrPerfFP, savePath + "-ScriptPerformanceOld.csv");
			FileTools.remove(scrPerfFP);
		}
		
		if (Starter.Config.SaveFiles && profileExists && soloplayProfile) {
			D2Bot.printToConsole("D2BotCleaner: Files saved to -> libs/SoloPlay/Data/" + charType + "/" + charClass + "/" + j, sdk.colors.D2Bot.Gold);
		}

		if (profileExists) {
			D2Bot.printToConsole("D2BotCleaner: Cleaned files for -> " + profiles[i], sdk.colors.D2Bot.Gold);
		}

		delay(500);
	}

	D2Bot.printToConsole("D2BotCleaner: Done cleaning files", sdk.colors.D2Bot.Gold);
}
	
function parseInfo () {
	for (let i in AccountsToClean) {
		if (AccountsToClean.hasOwnProperty(i) && typeof i === "string") {
			accounts.push(i);
			chars.push(AccountsToClean[i]);
		}
	}
	
	if (AdvancedCleanerConfig.generateAccounts) {
		for (let index = rangeStart; index <= rangeStop ; index += 1) {
			accounts.push(AdvancedCleanerConfig.accountPrefix + index + "/" + AdvancedCleanerConfig.accountPassword + "/" + AdvancedCleanerConfig.accountRealm);
			chars.push(["all"]);
		}
	}

	if (!accounts.length) {
		FileTools.remove("logs/D2BotCleaner.json");
		D2Bot.printToConsole("D2BotCleaner: No accounts entered. Exiting...", sdk.colors.D2Bot.Gold);
		ControlAction.timeoutDelay("Exiting in: ", 3 * 1e3);
		D2Bot.stop(me.profile, true);
	}
}
	
function deleteAllCharacters () {
	let characters = ControlAction.getCharacters();
	for (let character of characters) {
		let info = {charName: character};
		if (CharactersToExclude.includes(character)) continue;
		if (!ControlAction.deleteCharacter(info)) {
			print("failed to delete character " + character);
			return false;
		}
		delay(500);
	}
	return true;
}

function locationAction (location) {
	let i, currChar,
		obj = {};

	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();

		break;
	case sdk.game.locations.WaitingInLine:
		Controls.CancelCreateGame.click();

		break;
	case sdk.game.locations.Lobby:
	case sdk.game.locations.LobbyChat:
	case sdk.game.locations.CreateGame:
	case sdk.game.locations.JoinGame:
	case sdk.game.locations.Ladder:
	case sdk.game.locations.ChannelList:
	case sdk.game.locations.GameNameExists:
	case sdk.game.locations.GameDoesNotExist:
	case sdk.game.locations.GameIsFull:
		Controls.LobbyQuit.click();

		break;
	case sdk.game.locations.MainMenu:
	case sdk.game.locations.Login:
	case sdk.game.locations.SplashScreen:
		if (!accounts.length) {
			FileTools.remove("logs/D2BotCleaner.json");
			D2Bot.printToConsole("D2BotCleaner: Done cleaning accounts!", sdk.colors.D2Bot.Gold);
			D2Bot.stop(me.profile, true);
		}
		
		if (!firstAccount) {
			for (i = 0 ; i < Starter.Config.DelayBetweenAccounts; i += 1) {
				D2Bot.updateStatus("Waiting " + (Starter.Config.DelayBetweenAccounts - i) + "s for next account");
				delay(1e3);
			}
		}
		
		firstAccount = false;

		if (FileTools.exists("logs/D2BotCleaner.json")) {
			obj = JSON.parse(FileTools.readText("logs/D2BotCleaner.json"));

			if (obj.currAcc) {
				for (i = 0; i < accounts.length; i += 1) {
					if (accounts[i].split("/")[0] === obj.currAcc) {
						accounts.splice(0, i);
						chars.splice(0, i);

						i -= 1;

						break;
					}
				}
			}
		}

		let currAccInfo = accounts[0].split("/");
		currAcc = currAccInfo[0];
		obj.currAcc = currAccInfo[0];
		charList = chars[0];

		D2Bot.printToConsole("D2BotCleaner: Cleaning account:" + currAcc + " , Character list: " + charList, sdk.colors.D2Bot.Gold);
		FileTools.writeText("logs/D2BotCleaner.json", JSON.stringify(obj));
		
		if (currAcc.toLowerCase() === "singleplayer") {
			Controls.SinglePlayer.click();
		} else if (currAccInfo.length === 3) {
			realm = currAccInfo[2].toLowerCase();
			ControlAction.loginAccount({account: currAcc, password: currAccInfo[1], realm: realm});
		}

		break;
	case sdk.game.locations.LoginError:
	case sdk.game.locations.InvalidCdKey:
	case sdk.game.locations.CdKeyInUse:
		Starter.LocationEvents.loginError();

		break;
	case sdk.game.locations.LoginUnableToConnect:
		Starter.LocationEvents.unableToConnect();

		break;
	case sdk.game.locations.CharSelect:
	case sdk.game.locations.CharSelectNoChars:
		// Single Player screen fix
		if (currAcc.toLowerCase() !== "singleplayer") {
			if (getLocation() === sdk.game.locations.CharSelect && !Controls.CharSelectCurrentRealm.control) {
				Controls.CharSelectExit.click();

				break;
			}
		}
		
		if (!charList.length) {
			Controls.CharSelectExit.click();

			break;
		}

		if (charList[0] === "all") {
			deleteAllCharacters();
		} else {
			if (FileTools.exists("logs/D2BotCleaner.json")) {
				obj = JSON.parse(FileTools.readText("logs/D2BotCleaner.json"));

				if (obj.currChar) {
					for (i = 0; i < charList.length; i += 1) {
						if (charList[i] === obj.currChar) {
							// Remove the previous currChar as well
							charList.splice(0, i + 1);

							break;
						}
					}
				}
			}
			
			let charInfo = {charName: charList[0]};
			CharactersToExclude.indexOf(charInfo) === -1 && ControlAction.deleteCharacter(charInfo);
			delay(500);
		}

		currChar = charList.shift();
		obj.currChar = currChar;
		
		// last char in acc = trigger next acc
		if (!charList.length) {
			accounts.shift();
			chars.shift();
			Controls.CharSelectExit.click();
		}
		
		FileTools.writeText("logs/D2BotCleaner.json", JSON.stringify(obj));

		break;
	case sdk.game.locations.RealmDown:
		Starter.LocationEvents.realmDown();

		break;
	case sdk.game.locations.CharacterCreate:
	case sdk.game.locations.NewCharSelected:
		Controls.CharSelectExit.click();
				
		break;
	case sdk.game.locations.CharSelectPleaseWait:
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.Disconnected:
	case sdk.game.locations.LobbyLostConnection:
		D2Bot.updateStatus("Disconnected/LostConnection");
		delay(1000);
		Controls.OkCentered.click();

		break;
	case sdk.game.locations.SelectDifficultySP:
		break;
	case sdk.game.locations.MainMenuConnecting: // Main Menu - Connecting
		!Starter.locationTimeout(Starter.Config.ConnectingTimeout * 1e3, location) && Controls.LoginCancelWait.click();

		break;
	case sdk.game.locations.CharSelectConnecting:
		Starter.LocationEvents.charSelectError();

		break;
	case sdk.game.locations.ServerDown: // Server Down - not much to do but wait..
		break;
	case sdk.game.locations.LobbyPleaseWait:
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.GatewaySelect:
		Controls.GatewayCancel.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main () {
	addEventListener("copydata", Starter.receiveCopyData);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (Starter.gameInfo.error) {
		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;
			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, sdk.colors.D2Bot.Gray);
		}

		ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	Starter.Config.DataCleaner && dataCleaner();
	!accounts.length && parseInfo();

	while (true) {
		locationAction(getLocation());
		delay(1000);
	}
}
