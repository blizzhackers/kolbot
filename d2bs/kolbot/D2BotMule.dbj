/**
*  @filename    D2BotMule.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for AutoMule.js
*
*/
include("StarterConfig.js");

// D2BotMule specific settings - for global settings see libs/StarterConfig.js
Starter.Config.MinGameTime = 30; // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
Starter.Config.MaxGameTime = 60; // Maximum game length in minutes, only for continuous muling
Starter.Config.CreateGameDelay = 5; // Seconds to wait before creating a new game
Starter.Config.SwitchKeyDelay = 0; // Seconds to wait before switching a used/banned key or after realm down
Starter.Config.ExitToMenu = false; // Set to true to wait out restriction in main menu or false to wait in lobby.
Starter.Config.VersionErrorDelay = rand(15, 30); // Seconds to wait after 'unable to identify version' message
Starter.Config.MakeAccountOnFailure = true;

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// No touchy!
include("json2.js");
include("oog.js");
include("automule.js");
include("mulelogger.js");
include("torchsystem.js");
include("NTItemParser.dbl");
include("common/attack.js");
include("common/storage.js");
include("common/pickit.js");
include("common/town.js");
include("common/pather.js");
include("common/misc.js");
include("common/util.js");
include("common/config.js");
include("common/prototypes.js");
include("common/collmap.js");
let Controls = require("./modules/Control");
let Overrides = require("./modules/Override");

let master, muleMode, muleFilename, muleObj, maxCharCount;
let checkOnJoin = false;
let clearedJunk = false;
let continuousMule = false;
let makeNext = false;
let status = "loading";
let masterStatus = {
	status: ""
};

new Overrides.Override (Starter, Starter.receiveCopyData, function (orignal, mode, msg) {
	if (mode === 3) return;
	// automule specific
	// master/mule communication function
	switch (mode) {
	case 10: // mule request
		let obj = JSON.parse(msg);

		if (continuousMule && me.ingame) {
			sendCopyData(null, obj.profile, 10, JSON.stringify({status: "ready"}));
		} else {
			if (!master) {
				let masterInfo = AutoMule.getMaster(obj);

				if (masterInfo) {
					master = masterInfo.profile;
					muleMode = masterInfo.mode;
				}
			} else {
				if (obj.profile === master) {
					sendCopyData(null, master, 10, JSON.stringify({status: status}));
				} else {
					sendCopyData(null, obj.profile, 10, JSON.stringify({status: "busy"}));
				}
			}
		}

		break;
	case 11: // begin item pickup
		status = "begin";

		break;
	case 12: // get master's status
		masterStatus = JSON.parse(msg);

		break;
	default:
		orignal(mode, msg);

		break;
	}
}).apply();

// Mule Data object manipulates external mule datafile
const MuleData = {
	// create a new mule datafile
	create: function () {
		let obj = {
			account: "",
			accNum: 0,
			character: "",
			charNum: 0,
			fullChars: [],
			torchChars: []
		};

		let string = JSON.stringify(obj);

		FileTools.writeText(muleFilename, string);
	},

	// read data from the mule datafile and return the data object
	read: function () {
		let string = FileTools.readText(muleFilename);
		let obj = JSON.parse(string);

		return obj;
	},

	// write a data object to the mule datafile
	write: function (obj) {
		let string = JSON.stringify(obj);
		FileTools.writeText(muleFilename, string);
	}
};

function cursorCheck () {
	let cursorItem = Game.getCursorUnit();

	if (cursorItem) {
		if (!Storage.Inventory.CanFit(cursorItem) || !Storage.Inventory.MoveTo(cursorItem)) {
			cursorItem.drop();
		}
	}
	
	return true;
}

// stash picked items
function stashItems () {
	let items = me.findItems(-1, sdk.items.mode.inStorage, sdk.storage.Inventory);

	// stash large items first by sorting items by size in descending order
	items.sort((a, b) => (b.sizex * b.sizey - a.sizex * a.sizey));

	for (let i = 0; i < items.length; i++) {
		Storage.Stash.MoveTo(items[i]);
	}

	return true;
}

// pick items from ground
function pickItems () {
	let waitTick = getTickCount();
	let i, items, canFit, item;
	let rval = "fail";
	let list = [];

	while (!me.name || !me.gameReady) {
		if (!me.ingame) {
			return rval;
		}

		delay(100);
	}

	if (!clearedJunk) {
		items = me.findItems(-1, sdk.items.mode.inStorage, sdk.storage.Inventory);

		if (items) {
			for (i = 0; i < items.length; i++) {
				// drop trash (id/tp scroll primarily)
				if (items[i].isInInventory && Town.ignoredItemTypes.includes(items[i].itemType)
						// don't drop ID scroll with torch/anni mules
						&& (muleMode === 0 || items[i].classid !== sdk.items.ScrollofIdentify)) {
					try {
						items[i].drop();
					} catch (dropError) {
						print("Failed to drop an item.");
					}
				}
			}
		}

		clearedJunk = true; // only do this once
	}

	while (me.gameReady) {
		if (masterStatus.status === "done" || continuousMule || checkOnJoin) {
			checkOnJoin && (checkOnJoin = false);
			item = Game.getItem();

			if (item) {
				do {
					// don't pick up trash
					if (item.distance < 20 && item.onGroundOrDropping && Town.ignoredItemTypes.indexOf(item.itemType) === -1) {
						list.push(copyUnit(item));
					}
				} while (item.getNext());
			}

			// If and only if there is nothing left are we "done"
			if (!continuousMule && list.length === 0) {
				rval = "done";

				break;
			}

			// pick large items first by sorting items by size in descending order and move gheed's charm to the end of the list
			list.sort(function(a, b) {
				if (a.classid === sdk.items.GrandCharm && a.unique && !Pickit.canPick(a)) return 1;
				if (b.classid === sdk.items.GrandCharm && b.unique && !Pickit.canPick(b)) return -1;

				return (b.sizex * b.sizey - a.sizex * a.sizey);
			});

			while (list.length > 0) {
				item = list.shift();
				canFit = Storage.Inventory.CanFit(item);

				// Torch handling
				if (muleMode > 0 && item.classid === sdk.items.LargeCharm && item.unique && !Pickit.canPick(item)) {
					D2Bot.printToConsole("Mule already has a Torch.", sdk.colors.D2Bot.DarkGold);

					rval = "next";
				}

				// Anni handling
				if (muleMode > 0 && item.classid === sdk.items.SmallCharm && item.unique && !Pickit.canPick(item)) {
					D2Bot.printToConsole("Mule already has an Anni.", sdk.colors.D2Bot.DarkGold);

					rval = "next";
				}

				// Gheed's Fortune handling
				if (item.classid === sdk.items.GrandCharm && item.unique && !Pickit.canPick(item)) {
					D2Bot.printToConsole("Mule already has Gheed's.", sdk.colors.D2Bot.DarkGold);

					rval = "next";
				}

				if (!canFit) {
					stashItems();

					canFit = Storage.Inventory.CanFit(item);
				}

				if (canFit) {
					Pickit.pickItem(item);

					if (muleMode > 0 && continuousMule && item.unique
						&& ([sdk.items.SmallCharm, sdk.items.LargeCharm, sdk.items.GrandCharm].includes(item.classid))) {
						rval = "next";
					}
				} else {
					rval = "next";
				}
			}

			if (rval === "next" || continuousMule) {
				break;
			}
		} else {
			if (!continuousMule) {
				sendCopyData(null, master, 10, JSON.stringify({status: "report"}));
			} else {
				if (getTickCount() - waitTick > 10 * 60 * 1000) {
					break;
				}
			}
		}

		delay(500);
	}

	return rval;
}

// set next account - increase account number in mule datafile
function nextAccount () {
	let obj = MuleData.read();

	obj.accNum = obj.accNum + 1;
	obj.account = muleObj.accountPrefix + obj.accNum;
	obj.character = "";
	obj.charNum = 0;
	obj.fullChars = [];
	obj.torchChars = [];

	MuleData.write(obj);

	return obj.account;
}

// set next character - increase character number in mule datafile
function nextChar () {
	let charSuffix = "";
	let charNumbers = "abcdefghijklmnopqrstuvwxyz";
	let obj = MuleData.read();

	// dirty
	obj.charNum > 25 && (obj.charNum = 0);
	let num = obj.accNum.toString();

	for (let i = 0; i < num.length; i++) {
		charSuffix += charNumbers[parseInt(num[i], 10)];
	}

	charSuffix += charNumbers[obj.charNum];
	obj.charNum = obj.charNum + 1;
	obj.character = muleObj.charPrefix + charSuffix;

	MuleData.write(obj);

	return obj.character;
}

function ingameTimeout (time) {
	let tick = getTickCount();

	while (getTickCount() - tick < time) {
		if (me.ingame && me.gameReady) {
			return true;
		}

		// game doesn't exist, might need more locs
		if (getLocation() === 28) {
			break;
		}

		delay(100);
	}

	return me.ingame && me.gameReady;
}

new Overrides.Override (Starter, Starter.updateCount, function () {
	D2Bot.updateCount();
	delay(1000);
	Controls.BattleNet.click();

	let obj = MuleData.read();
	let info = {
		realm: muleObj.realm,
		account: obj.account,
		password: muleObj.accountPassword
	};

	MuleLogger.save(md5(info.realm.toLowerCase() + info.account.toLowerCase()), info.password);
	ControlAction.loginAccount(info);
	delay(1000);
	Controls.CharSelectExit.click();
}).apply();

function checkAnniTorch () {
	while (!me.gameReady) {
		delay(500);
	}

	return (me.findItem(sdk.items.SmallCharm, sdk.items.mode.inStorage, -1, sdk.items.quality.Unique)
		|| me.findItem(sdk.items.LargeCharm, sdk.items.mode.inStorage, -1, sdk.items.quality.Unique));
}

function foreverAlone () {
	let party = getParty();

	if (party) {
		do {
			if (party.name !== me.name) {
				return false;
			}
		} while (party.getNext());
	}

	return true;
}

function locationAction (location) {
	let i, obj, info, string, text;

	switch (location) {
	case sdk.game.locations.PreSplash:
	case sdk.game.locations.SplashScreen:
		ControlAction.click();

		break;
	case sdk.game.locations.Lobby:
	case sdk.game.locations.LobbyChat:
		D2Bot.updateStatus("Lobby");

		if (Starter.inGame) {
			print("updating runs");
			D2Bot.updateRuns();
			status = "ready";
			Starter.inGame = false;
		}

		if (makeNext) {
			Controls.LobbyQuit.click();

			break;
		}

		Starter.LocationEvents.openJoinGameWindow();

		break;
	case sdk.game.locations.CreateGame:
		D2Bot.updateStatus("Creating Game");

		// remove level restriction
		Controls.CharacterDifference.disabled === 5 && Controls.CharacterDifferenceButton.click();

		// Max number of players
		Controls.MaxPlayerCount.setText("8");

		delay(2000);

		// FTJ handler
		if (status === "pending") {
			D2Bot.printToConsole("Failed to create game");
			ControlAction.timeoutDelay("FTJ delay", Starter.Config.FTJDelay * 1e3);
			D2Bot.updateRuns();
		}

		createGame(muleObj.muleGameName[0], muleObj.muleGameName[1]);
		ingameTimeout(5000);

		status = "pending";

		break;
	case sdk.game.locations.WaitingInLine:
		Starter.LocationEvents.waitingInLine();

		break;
	case sdk.game.locations.JoinGame:
		D2Bot.updateStatus("Join Game");

		if (status === "pending") {
			D2Bot.printToConsole("Failed to join game");
			ControlAction.timeoutDelay("Join Delay", Starter.Config.FTJDelay * 1000);
			D2Bot.updateRuns();
		}

		if (!continuousMule) {
			D2Bot.requestGame(master);
			delay(100);
		}

		delay(2000);

		if (Object.keys(Starter.joinInfo).length && Starter.joinInfo.gameName !== "" && Starter.joinInfo.inGame) {
			joinGame(Starter.joinInfo.gameName, Starter.joinInfo.gamePass);
		} else {
			joinGame(muleObj.muleGameName[0], muleObj.muleGameName[1]);
		}

		!Starter.firstLogin && (status = "pending");

		ingameTimeout(5000);
		print("Ingame timeout done.");

		// could not join game
		getLocation() === sdk.game.locations.Lobby && !me.ingame && Controls.CreateGameWindow.click();

		break;
	case sdk.game.locations.Ladder:
	case sdk.game.locations.ChannelList:
		break;
	case sdk.game.locations.MainMenu:
	case sdk.game.locations.Login:
		makeNext && (makeNext = false);

		obj = MuleData.read();

		if (!obj.account || obj.account.indexOf(muleObj.accountPrefix) < 0) {
			nextAccount();
			obj = MuleData.read();
		}

		info = {
			realm: muleObj.realm,
			account: obj.account,
			password: muleObj.accountPassword
		};

		if (Starter.makeAccount) {
			ControlAction.makeAccount(info);
			D2Bot.printToConsole("Made account: " + info.account, sdk.colors.D2Bot.DarkGold);
			Starter.makeAccount = false;

			break;
		}

		MuleLogger.save(md5(info.realm.toLowerCase() + info.account.toLowerCase()), info.password);
		!ControlAction.loginAccount(info) && (Starter.makeAccount = true);

		break;
	case sdk.game.locations.LoginError:
	case sdk.game.locations.InvalidCdKey:
	case sdk.game.locations.CdKeyInUse:
		Starter.LocationEvents.loginError();

		break;
	case sdk.game.locations.LoginUnableToConnect:
	case sdk.game.locations.TcpIpUnableToConnect:
		Starter.LocationEvents.unableToConnect();

		break;
	case sdk.game.locations.RealmDown:
		Starter.LocationEvents.realmDown();

		break;
	case sdk.game.locations.Disconnected:
	case sdk.game.locations.LobbyLostConnection:
		D2Bot.updateStatus("Disconnected/LostConnection");
		delay(1000);
		Controls.OkCentered.click();

		break;
	case sdk.game.locations.CharSelect:
	case sdk.game.locations.NewCharSelected:
	case sdk.game.locations.CharacterCreate:
	case sdk.game.locations.CharSelectNoChars:
		string = "";
		text = Controls.CharSelectError.getText();

		if (text) {
			for (i = 0; i < text.length; i++) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			if (string === getLocaleString(sdk.locale.text.CdKeyDisabledFromRealm)) { // CDKey disabled from realm play
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + Starter.gameInfo.mpq, sdk.colors.D2Bot.Gold);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", Starter.Config.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop(me.profile, true);
				}
			}
		}

		// Single Player screen fix
		// TODO: see if this is still needed. d2bs doesn't load scripts twice anymore
		if (getLocation() === sdk.game.locations.CharSelect && !Controls.CharSelectCurrentRealm.control) {
			Controls.CharSelectExit.click();

			break;
		}

		// Can't create character, button greyed out = high likelyhood of realm down
		if (getLocation() === sdk.game.locations.CharSelectNoChars && Controls.CharSelectCreate.disabled === sdk.game.controls.Disabled) {
			D2Bot.updateStatus("Realm Down");
			delay(1000);

			if (!Controls.CharSelectExit.click()) {
				break;
			}

			Starter.updateCount();
			ControlAction.timeoutDelay("Realm Down", Starter.Config.RealmDownDelay * 6e4);
			D2Bot.CDKeyRD();

			if (Starter.gameInfo.switchKeys) {
				D2Bot.printToConsole("Realm Down - Changing CD-Key");
				ControlAction.timeoutDelay("Key switch delay", Starter.Config.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				D2Bot.restart();
			}
		}

		obj = MuleData.read();
		maxCharCount = (muleObj.charsPerAcc > 0 ? Math.min(muleObj.charsPerAcc, 18) : 8);

		if (makeNext) {
			if (obj.fullChars.length >= maxCharCount || (muleMode > 0 && obj.torchChars.length >= maxCharCount)) {
				Controls.CharSelectExit.click();
				nextAccount();

				break;
			}

			makeNext = false;
		}

		if (!obj.character || obj.character.indexOf(muleObj.charPrefix) < 0) {
			nextChar();

			obj = MuleData.read();
		}

		info = {
			account: obj.account,
			charName: obj.character,
			ladder: muleObj.ladder,
			hardcore: muleObj.hardcore,
			expansion: muleObj.expansion,
			charClass: "amazon"
		};

		if (muleMode > 0 && obj.torchChars.includes(info.charName)) {
			nextChar();

			break;
		}

		if (ControlAction.findCharacter(info)) {
			ControlAction.loginCharacter(info, false);
		} else {
			// premade account that's already full
			if (ControlAction.getCharacters().length >= maxCharCount) {
				Controls.CharSelectExit.click();
				nextAccount();

				break;
			}

			if (!ControlAction.makeCharacter(info)) {
				// TODO: check if acc is full and cancel location 15 and 29 if true
				nextChar();

				break;
			}

			D2Bot.printToConsole("Made character: " + info.charName, sdk.colors.D2Bot.DarkGold);
		}

		break;
	case sdk.game.locations.CharSelectPleaseWait:
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.SelectDifficultySP:
		break;
	case sdk.game.locations.MainMenuConnecting:
		!Starter.locationTimeout(Starter.Config.ConnectingTimeout * 1e3, location) && Controls.LoginCancelWait.click();

		break;
	case sdk.game.locations.CharSelectConnecting:
		Starter.LocationEvents.charSelectError();

		break;
	case sdk.game.locations.LobbyPleaseWait:
		!Starter.locationTimeout(Starter.Config.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.GameNameExists:
		Controls.JoinGameWindow.click();

		break;
	case sdk.game.locations.GatewaySelect:
		Controls.GatewayCancel.click();

		break;
	case sdk.game.locations.GameDoesNotExist:
		Controls.CreateGameWindow.click();

		break;
	case sdk.game.locations.OkCenteredErrorPopUp:
		Controls.OkCentered.click();
		Controls.CharSelectExit.click();

		break;
	case sdk.game.locations.ServerDown:
	case sdk.game.locations.GameIsFull:
		break;
	case sdk.game.locations.OtherMultiplayer:
		// probably should implement way to use open-bnet
		Controls.OtherMultiplayerCancel.click();

		break;
	case sdk.game.locations.TcpIp:
	case sdk.game.locations.TcpIpEnterIp:
		Controls.TcpIpCancel.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

// eslint-disable-next-line no-unused-vars
function gameEvent (mode, param1, param2, name1, name2) {
	if (!me.ingame || !me.gameReady || !me.name) {
		return;
	}

	switch (mode) {
	case 0x00: // "%Name1(%Name2) dropped due to time out."
	case 0x01: // "%Name1(%Name2) dropped due to errors."
	case 0x03: // "%Name1(%Name2) left our world. Diablo's minions weaken."
		print("Waiting");
		status = "ready";

		break;
	case 0x02: // "%Name1(%Name2) joined our world. Diablo's minions grow stronger."
		if (name1.trim() !== me.name.trim()) {
			print("begin");
			status = "begin";
		}

		break;
	}
}

function main () {
	addEventListener("copydata", Starter.receiveCopyData);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (Starter.gameInfo.rdBlocker) {
		D2Bot.printToConsole("You must disable RD Blocker for Mule Logger to work properly. Stopping.");
		D2Bot.stop(me.profile, true);

		return;
	}

	D2Bot.updateRuns(); // we need the mule to swap keys somehow after all
	delay(1000);

	continuousMule = AutoMule.isContinousMule();

	if (continuousMule) {
		muleMode = AutoMule.getMuleMode();
		muleObj = AutoMule.getMuleObject(muleMode, "", true);
		muleFilename = AutoMule.getMuleFilename(muleMode, "", true);
		addEventListener("gameevent", gameEvent);
	} else {
		// Wait for master before login = give room to determine muling mode (normal or torch)
		while (!master) {
			delay(100);
		}

		print("Master found: " + master);

		muleObj = AutoMule.getMuleObject(muleMode, master);
		muleFilename = AutoMule.getMuleFilename(muleMode, master);
	}

	print("Mule filename: " + muleFilename);

	let obj, tick, idleTick, statusString = "";

	try {
		// ugly solution to uglier problem - pickItem area update
		!FileTools.exists("data/" + me.profile + ".json") && DataFile.create();

		// create mule datafile if it doesn't exist
		!FileTools.exists(muleFilename) && MuleData.create();

		obj = MuleData.read();
		obj.account && obj.account.indexOf(muleObj.accountPrefix) < 0 && MuleData.create();
	} catch (e) {
		print("Caught exception creating data files.");
		print(e);
		D2Bot.printToConsole("DataFileException: " + e.message + " (" + e.fileName.substring(e.fileName.lastIndexOf("\\") + 1, e.fileName.length) + " #" + e.lineNumber + ")");
	}

	while (true) {
		try {
			if (me.ingame && me.gameReady) {
				if (!Starter.inGame) {
					Starter.firstLogin && (Starter.firstLogin = false);
					status !== "begin" && (status = "ready");
					statusString = "In " + (muleMode === 2 ? "anni " : muleMode === 1 ? "torch " : "") + "mule game.";

					D2Bot.updateStatus(statusString + " Status: " + status);
					D2Bot.printToConsole(statusString, sdk.colors.D2Bot.DarkGold);
					tick = getTickCount();

					while ((getLocation() !== null || !me.area) && getTickCount() - tick < 5000) {
						delay(200);
					}

					if (!me.ingame || !me.gameReady || !me.inTown) {
						continue;
					}

					Town.goToTown(1);
					Town.move("stash");
					Storage.Init();
					checkOnJoin && (status = "begin");
					idleTick = getTickCount() + rand(1200, 1500) * 1000;
					Starter.inGame = true;

					if (continuousMule && !muleObj.onlyLogWhenFull) {
						MuleLogger.logChar();
					}
				}

				if (!continuousMule) {
					print("Waiting for muler");
					tick = getTickCount();

					while (getTickCount() - tick < 60000) {
						if (status === "begin") {
							break;
						}

						delay(100);
					}

					if (status !== "begin") {
						D2Bot.printToConsole("Nobody joined - stopping.", sdk.colors.D2Bot.Red);
						D2Bot.stop(me.profile, true);
					}
				}

				!continuousMule && me.overhead("begin");

				if (status === "begin" && !checkOnJoin && foreverAlone()) {
					status = "ready";
					print("Error somewhere, no one is here but I was set to pick items");
				}

				if (status === "begin") {
					switch (pickItems()) {
					// done picking, tell the master to leave game and kill mule profile
					case "done":
						!muleObj.onlyLogWhenFull && MuleLogger.logChar();

						obj = MuleData.read();

						if (checkAnniTorch() && obj.torchChars.indexOf(me.name) === -1) {
							obj.torchChars.push(me.name);
						}

						MuleData.write(obj);
						D2Bot.printToConsole("Done muling.", sdk.colors.D2Bot.DarkGold);
						sendCopyData(null, master, 10, JSON.stringify({status: "quit"}));
						D2Bot.stop(me.profile, true);

						return;
					// can't fit more items, get to next character or account
					case "next":
						MuleLogger.logChar();
						delay(500);

						makeNext = true;
						checkOnJoin = true;
						obj = MuleData.read();

						if (checkAnniTorch() && obj.torchChars.indexOf(me.name) === -1) {
							obj.torchChars.push(me.name);
						}

						obj.fullChars.push(me.name);
						MuleData.write(obj);
						nextChar();
						D2Bot.printToConsole("Mule full, getting next character.", sdk.colors.D2Bot.DarkGold);

						if (Starter.Config.MinGameTime && getTickCount() - tick < Starter.Config.MinGameTime * 1000) {
							while (getTickCount() - tick < Starter.Config.MinGameTime * 1000) {
								me.overhead("Stalling for " + Math.round(((tick + (Starter.Config.MinGameTime * 1000)) - getTickCount()) / 1000) + " Seconds");
								delay(1000);
							}
						}

						cursorCheck();
						quit();

						// TODO: see whether a for loop is better
						while (me.ingame) {
							delay(100);
						}

						break;
					case "fail":
						// Try again
						break;
					}
				}

				if (continuousMule) {
					if (Starter.Config.MaxGameTime > 0 && getTickCount() - me.gamestarttime > Starter.Config.MaxGameTime * 60 * 1000 && foreverAlone()) {
						print("MaxGameTime Reached");
						cursorCheck();
						quit();
						
						while (me.ingame) {
							delay(100);
						}
						
						Starter.firstLogin = true;
						print("updating runs");
						D2Bot.updateRuns();
						status = "ready";
						Starter.inGame = false;
						
						delay(1000);
						Controls.LobbyQuit.click(); // Quit from Lobby
						ControlAction.timeoutDelay("Refresh game", 330 * 1000); // 5.5 minutes						
						
						continue;
					}
				}

				// anti-idle
				if (getTickCount() - idleTick > 0) {
					Packet.questRefresh();
					idleTick += rand(1200, 1500) * 1000;
					print("Sent anti-idle packet, next refresh in: (" + Time.format(idleTick - getTickCount()) + ")");
				}

				D2Bot.updateStatus(statusString + Starter.timer(me.gamestarttime));
			}

			if (!me.ingame) {
				delay(1000);
				locationAction(getLocation());
			}
		} catch (e2) {
			print("Caught an exception in the main loop.");
			print(e2);
			D2Bot.printToConsole("MainLoopException: " + e2.message + " (" + e2.fileName.substring(e2.fileName.lastIndexOf("\\") + 1, e2.fileName.length) + " #" + e2.lineNumber + ")");
		}

		delay(100);
	}
}
