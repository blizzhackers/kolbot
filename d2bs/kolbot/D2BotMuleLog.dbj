include("StarterConfig.js");

// D2BotMuleLog settings
StarterConfig.MinGameTime = rand(150, 180); // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
StarterConfig.CreateGameDelay = 5; // Seconds to wait before creating a new game
StarterConfig.SwitchKeyDelay = 0; // Seconds to wait before switching a used/banned key or after realm down

// Override default values for StarterConfig under here by following format
// StarterConfig.ValueToChange = value; // Example: StarterConfig.MinGameTime = 500; // changes MinGameTime to 500 seconds

// No touchy!
include("json2.js");
include('polyfill.js');
include("OOG.js");
include("MuleLogger.js");
include("common/misc.js");
include("common/util.js");
include("common/prototypes.js");
let Control_1 = require('./modules/Control');

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

let connectFail, currAcc, charList,
	accounts = [],
	chars = [];

function parseInfo() {
	for (let i in MuleLogger.LogAccounts) {
		if (MuleLogger.LogAccounts.hasOwnProperty(i) && typeof i === "string") {
			accounts.push(i);
			chars.push(MuleLogger.LogAccounts[i]);
		}
	}
}

function locationAction (location) {
	let i, string, text, currChar,
		obj = {};

	MainSwitch:
	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();

		break;
	case sdk.game.locations.Lobby:	// Lobby
	case sdk.game.locations.LobbyChat: // Lobby Chat
		D2Bot.updateStatus("Lobby");

		if (Starter.inGame) {
			if (getTickCount() - Starter.gameStart < StarterConfig.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("Min game time wait", StarterConfig.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}

			print("updating runs");
			D2Bot.updateRuns();
			delay(1000);

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			Control_1.LobbyQuit.click(); // Quit from Lobby

			break;
		}

		// Create
		if (!Control_1.CreateGameWindow.click()) {
			break;
		}

		// dead HC character
		if (Control_1.CreateGameWindow.control && Control_1.CreateGameWindow.disabled === 4) {
			Control_1.LobbyQuit.click(); // Quit from Lobby
			break;
		}

		// in case join button gets bugged
		if (!Starter.locationTimeout(5000, location)) {
			if (!Control_1.JoinGameWindow.click()) {
				break;
			}
			
			if (!Control_1.CreateGameWindow.click()) {
				break;
			}
		}

		break;
	case sdk.game.locations.WaitingInLine:
		let queue = ControlAction.getQueueTime();

		if (queue > 0) {
			switch (true) {
			case (queue < 10000):
				D2Bot.updateStatus("Waiting line... Queue: " + queue);

				// If stuck here for too long, game creation likely failed. Exit to char selection and try again.
				if (queue < 10) {
					if (!Starter.locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location)) {
						print("Failed to create game");
						Control_1.CancelCreateGame.click();
						Control_1.LobbyQuit.click();
						delay(1000);
					}
				}

				break;
			case (queue > 10000):
				if (StarterConfig.WaitOutQueueRestriction) {
					D2Bot.updateStatus("Waiting out Queue restriction: " + queue);
				} else {
					print("Restricted... Queue: " + queue);
					D2Bot.printToConsole("Restricted... Queue: " + queue, 9);
					Control_1.CancelCreateGame.click();

					if (StarterConfig.WaitOutQueueExitToMenu) {
						Control_1.LobbyQuit.click();
						delay(1000);
						Control_1.CharSelectExit.click();
					}

					// Wait out each queue as 1 sec and add extra 10 min
					ControlAction.timeoutDelay("Restricted", (queue + 600) * 1000);
				}

				break;
			}
		}

		break;
	case sdk.game.locations.CreateGame: // Create Game
		D2Bot.updateStatus("Creating Game");

		// remove level restriction
		Control_1.CharacterDifference.disabled === 5 && Control_1.CharacterDifferenceButton.click();

		// Max number of players
		Control_1.MaxPlayerCount.setText("8");

		if (Starter.gameCount >= 99) {
			Starter.gameCount = 1;

			DataFile.updateStats("runs", Starter.gameCount);
		}

		if (Starter.lastGameStatus === "pending") {
			D2Bot.printToConsole("Failed to create game");

			Starter.gameCount += 1;
		}

		ControlAction.timeoutDelay("Make Game Delay", StarterConfig.CreateGameDelay * 1e3);
		createGame(MuleLogger.LogGame[0] + Starter.gameCount, MuleLogger.LogGame[1], 0);
		Starter.locationTimeout(5000, location);
		Starter.lastGameStatus = "pending";

		break;
	case sdk.game.locations.JoinGame: // Join Game
		break;
	case sdk.game.locations.Ladder: // Ladder
		break;
	case sdk.game.locations.ChannelList: // Channel List
		break;
	case sdk.game.locations.MainMenu: // Main Menu
	case sdk.game.locations.Login: // Login
	case sdk.game.locations.SplashScreen: // D2 Splash
		if (!accounts.length) {
			FileTools.remove("logs/MuleLog.json");
			D2Bot.printToConsole("Done logging mules!");
			D2Bot.stop();

			break;
		}

		if (FileTools.exists("logs/MuleLog.json")) {
			obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));

			if (obj.currAcc) {
				for (i = 0; i < accounts.length; i += 1) {
					if (accounts[i].split("/")[0] === obj.currAcc) {
						accounts.splice(0, i);
						chars.splice(0, i);
						i -= 1;

						break;
					}
				}
			}
		}

		currAcc = accounts[0];
		currAcc = currAcc.split("/");
		charList = chars[0];
		obj.currAcc = currAcc[0];

		print("每c4Mule Logger每c2: Login account: " + currAcc[0]);
		MuleLogger.save(md5(currAcc[2].toLowerCase() + currAcc[0].toLowerCase()), currAcc[1]);

		if (ControlAction.loginAccount({account: currAcc[0], password: currAcc[1], realm: currAcc[2]})) {
			accounts.shift(); // remove current account from the list
		}

		break;
	case sdk.game.locations.LoginError: // Login Error
		string = "";
		text = Control_1.LoginErrorText.getText();

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");

				break;
			case getLocaleString(5208):
				D2Bot.updateStatus("Invalid Account");
				D2Bot.printToConsole("Invalid Account");

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("Invalid CDKey");
				D2Bot.printToConsole("Invalid CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected");
				D2Bot.printToConsole("Disconnected");
				Control_1.LoginErrorOk.click();

				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}
			
			Control_1.LoginErrorOk.click();
	
			while (true) {
				delay(1000);
			}
		}

		break;
	case sdk.game.locations.LoginUnableToConnect: // Unable To Connect
		D2Bot.updateStatus("Unable To Connect");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			connectFail = false;
		} else {
			connectFail = true;
		}

		Control_1.UnableToConnectOk.click();

		break;
	case sdk.game.locations.CharSelect: // Character Select
		// Single Player screen fix
		if (getLocation() === sdk.game.locations.CharSelect && !Control_1.CharSelectCurrentRealm.control) {
			Control_1.CharSelectExit.click();

			break;
		}

		if (!charList.length) {
			Control_1.CharSelectExit.click();

			break;
		}

		charList[0] === "all" && (charList = ControlAction.getCharacters());

		if (FileTools.exists("logs/MuleLog.json")) {
			obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));
			
			if (obj.currChar) {
				for (i = 0; i < charList.length; i += 1) {
					if (charList[i] === obj.currChar) {
						// Remove the previous currChar as well
						charList.splice(0, i + 1);

						break;
					}
				}
			}
		}

		// last char in acc = trigger next acc
		if (!charList.length) {
			print("No more characters");
			accounts.shift(); // remove current account from the list
			chars.shift();

			break;
		}

		currChar = charList.shift();
		obj.currChar = currChar;

		print("每c4Mule Logger每c2: Login character: " + currChar);
		FileTools.writeText("logs/MuleLog.json", JSON.stringify(obj));
		ControlAction.loginCharacter({charName: currChar});

		break;
	case sdk.game.locations.RealmDown: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!Control_1.CharSelectExit.click()) {
			break;
		}

		Starter.updateCount();
		ControlAction.timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);

		if (Starter.gameInfo.switchKeys) {
			D2Bot.printToConsole("Realm Down - Changing CD-Key");
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			D2Bot.restart();
		}

		break;
	case sdk.game.locations.Disconnected: // Character Select / Main Menu - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		Control_1.OkCentered.click();
		break;
	case sdk.game.locations.NewCharSelected: // New Character
		break;
	case sdk.game.locations.CharSelectPleaseWait: // Character Select - Please Wait popup
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			Control_1.OkCentered.click();
		}

		break;
	case sdk.game.locations.LobbyLostConnection: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		Control_1.OkCentered.click();
		break;
	case sdk.game.locations.CdKeyInUse: // Login - Cdkey In Use
		D2Bot.printToConsole(Starter.gameInfo.mpq + " is in use by " + Control_1.LoginCdKeyInUseBy.getText(), 6);
		D2Bot.CDKeyInUse();

		if (Starter.gameInfo.switchKeys) {
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			Control_1.UnableToConnectOk.click();
			ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case sdk.game.locations.SelectDifficultySP: // Single Player - Select Difficulty
		break;
	case sdk.game.locations.MainMenuConnecting: // Main Menu - Connecting
		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			Control_1.LoginCancelWait.click();
		}

		break;
	case sdk.game.locations.InvalidCdKey: // Login - Invalid Cdkey (classic or xpac)
		text = Control_1.LoginInvalidCdKey.getText();
		string = "";

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}
		}

		switch (string) {
		case getLocaleString(10914):
			D2Bot.printToConsole(Starter.gameInfo.mpq + " LoD key in use by " + Control_1.LoginCdKeyInUseBy.getText(), 6);
			D2Bot.CDKeyInUse();

			if (Starter.gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				Control_1.UnableToConnectOk.click();
				ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		default:
			if (Starter.gameInfo.switchKeys) {
				D2Bot.printToConsole("Invalid CD-Key");
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				Control_1.UnableToConnectOk.click();
				ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		}

		break;
	case sdk.game.locations.CharSelectConnecting: // Character Select - Connecting
		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			Control_1.CharSelectExit.click();
		}

		break;
	case sdk.game.locations.ServerDown: // Server Down - not much to do but wait..
		break;
	case sdk.game.locations.LobbyPleaseWait: // Lobby - Please Wait
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			Control_1.OkCentered.click();
		}

		break;
	case sdk.game.locations.GameNameExists: // Lobby - Game Name Exists
		Control_1.CreateGameWindow.click();

		break;
	case sdk.game.locations.GatewaySelect: // Gateway Select
		Control_1.GatewayCancel.click();

		break;
	case sdk.game.locations.GameDoesNotExist: // Lobby - Game Does Not Exist
		Control_1.CreateGameWindow.click();

		break;
	case sdk.game.locations.GameIsFull: // Game is full
		D2Bot.printToConsole("Game is full");

		Starter.lastGameStatus = "ready";

		delay(500);
		Control_1.JoinGameWindow.click();

		break;
	case sdk.game.locations.CharSelectNoChars: // Empty character screen
		// TODO: see if this is needed in case 12 too
		string = "";
		text = Control_1.CharSelectError.getText();

		if (text) {
			for (i = 0; i < text.length; i += 1) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			if (string === getLocaleString(11161)) { // CDKey disabled from realm play
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + Starter.gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (Starter.gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}

		if (!Starter.locationTimeout(5000, location)) {
			accounts.shift(); // remove current account from the list
			chars.shift();

			Control_1.CharSelectExit.click();
		}

		break;
	case sdk.game.locations.OtherMultiplayer: // Other Multiplayer
		Control_1.OtherMultiplayerCancel.click();

		break;
	case sdk.game.locations.TcpIp: // TCP/IP Game
		Control_1.TcpIpCancel.click();

		break;
	case sdk.game.locations.TcpIpEnterIp: // TCP/IP Game - Enter Host IP
		try {
			login(me.profile);
		} catch (e) {
			print(e);
		}

		break;
	case sdk.game.locations.TcpIpUnableToConnect: // Unable To Connect TCP/IP
		D2Bot.updateStatus("Unable To Connect TCP/IP");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.TCPIPNoHostDelay * 1e3);

			connectFail = false;
		} else {
			connectFail = true;
		}

		Control_1.OkCentered.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main() {
	addEventListener('copydata', Starter.receiveCopyData);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (Starter.gameInfo.rdBlocker) {
		D2Bot.printToConsole("You must disable RD Blocker for Mule Logger to work properly. Stopping.");
		D2Bot.stop();

		return;
	}

	parseInfo();

	if (Starter.gameInfo.error) {
		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, 10);
		}

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				if (!Starter.inGame) {
					print("Updating Status");
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					Starter.gameStart = getTickCount();
					DataFile.updateStats("runs", Starter.gameCount);
				}

				D2Bot.updateStatus("Game: " + me.gamename + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		locationAction(getLocation());
		delay(1000);
	}
}
