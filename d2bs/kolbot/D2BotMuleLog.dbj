include("StarterConfig.js");

// D2BotMuleLog settings
StarterConfig.MinGameTime = rand(150, 180); // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
StarterConfig.CreateGameDelay = 5; // Seconds to wait before creating a new game
StarterConfig.SwitchKeyDelay = 0; // Seconds to wait before switching a used/banned key or after realm down

// Override default values for StarterConfig under here by following format
// StarterConfig.ValueToChange = value; // Example: StarterConfig.MinGameTime = 500; // changes MinGameTime to 500 seconds

// No touchy!
include("json2.js");
include('polyfill.js');
include("OOG.js");
include("MuleLogger.js");
include("common/misc.js");
include("common/util.js");
include("common/prototypes.js");
let Controls = require('./modules/Control');

if (!FileTools.exists("data/" + me.profile + ".json")) {
	DataFile.create();
}

let currAcc, charList,
	accounts = [],
	chars = [];

function parseInfo() {
	for (let i in MuleLogger.LogAccounts) {
		if (MuleLogger.LogAccounts.hasOwnProperty(i) && typeof i === "string") {
			accounts.push(i);
			chars.push(MuleLogger.LogAccounts[i]);
		}
	}
}

function locationAction (location) {
	let i, currChar,
		obj = {};

	switch (location) {
	case sdk.game.locations.PreSplash:
		ControlAction.click();

		break;
	case sdk.game.locations.Lobby:
	case sdk.game.locations.LobbyChat:
		D2Bot.updateStatus("Lobby");

		if (Starter.inGame) {
			if (getTickCount() - Starter.gameStart < StarterConfig.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("Min game time wait", StarterConfig.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}

			print("updating runs");
			D2Bot.updateRuns();
			delay(1000);

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;
			Controls.LobbyQuit.click();

			break;
		}

		LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.WaitingInLine:
		LocationEvents.waitingInLine();

		break;
	case sdk.game.locations.CreateGame:
		D2Bot.updateStatus("Creating Game");

		// remove level restriction
		Controls.CharacterDifference.disabled === 5 && Controls.CharacterDifferenceButton.click();

		// Max number of players
		Controls.MaxPlayerCount.setText("8");

		if (Starter.gameCount >= 99) {
			Starter.gameCount = 1;

			DataFile.updateStats("runs", Starter.gameCount);
		}

		if (Starter.lastGameStatus === "pending") {
			D2Bot.printToConsole("Failed to create game");

			Starter.gameCount += 1;
		}

		ControlAction.timeoutDelay("Make Game Delay", StarterConfig.CreateGameDelay * 1e3);
		createGame(MuleLogger.LogGame[0] + Starter.gameCount, MuleLogger.LogGame[1], 0);
		Starter.locationTimeout(5000, location);
		Starter.lastGameStatus = "pending";

		break;
	case sdk.game.locations.JoinGame:
	case sdk.game.locations.Ladder:
	case sdk.game.locations.ChannelList:
		LocationEvents.openCreateGameWindow();

		break;
	case sdk.game.locations.MainMenu:
	case sdk.game.locations.Login:
	case sdk.game.locations.SplashScreen:
		if (!accounts.length) {
			FileTools.remove("logs/MuleLog.json");
			D2Bot.printToConsole("Done logging mules!");
			D2Bot.stop();

			break;
		}

		if (FileTools.exists("logs/MuleLog.json")) {
			obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));

			if (obj.currAcc) {
				for (i = 0; i < accounts.length; i += 1) {
					if (accounts[i].split("/")[0] === obj.currAcc) {
						accounts.splice(0, i);
						chars.splice(0, i);
						i -= 1;

						break;
					}
				}
			}
		}

		currAcc = accounts[0];
		currAcc = currAcc.split("/");
		charList = chars[0];
		obj.currAcc = currAcc[0];

		print("每c4Mule Logger每c2: Login account: " + currAcc[0]);
		MuleLogger.save(md5(currAcc[2].toLowerCase() + currAcc[0].toLowerCase()), currAcc[1]);

		if (ControlAction.loginAccount({account: currAcc[0], password: currAcc[1], realm: currAcc[2]})) {
			accounts.shift(); // remove current account from the list
		}

		break;
	case sdk.game.locations.LoginError:
	case sdk.game.locations.InvalidCdKey:
	case sdk.game.locations.CdKeyInUse:
		LocationEvents.loginError();

		break;
	case sdk.game.locations.LoginUnableToConnect:
	case sdk.game.locations.TcpIpUnableToConnect:
		LocationEvents.unableToConnect();

		break;
	case sdk.game.locations.CharSelect:
		// Single Player screen fix
		if (getLocation() === sdk.game.locations.CharSelect && !Controls.CharSelectCurrentRealm.control && Controls.CharSelectExit.click()) {
			break;
		}

		if (!charList.length && Controls.CharSelectExit.click()) {
			break;
		}

		charList[0] === "all" && (charList = ControlAction.getCharacters());

		if (FileTools.exists("logs/MuleLog.json")) {
			obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));
			
			if (obj.currChar) {
				for (i = 0; i < charList.length; i += 1) {
					if (charList[i] === obj.currChar) {
						// Remove the previous currChar as well
						charList.splice(0, i + 1);

						break;
					}
				}
			}
		}

		// last char in acc = trigger next acc
		if (!charList.length) {
			print("No more characters");
			accounts.shift(); // remove current account from the list
			chars.shift();

			break;
		}

		currChar = charList.shift();
		obj.currChar = currChar;

		print("每c4Mule Logger每c2: Login character: " + currChar);
		FileTools.writeText("logs/MuleLog.json", JSON.stringify(obj));
		ControlAction.loginCharacter({charName: currChar});

		break;
	case sdk.game.locations.RealmDown:
		LocationEvents.realmDown();

		break;
	case sdk.game.locations.Disconnected:
	case sdk.game.locations.LobbyLostConnection:
		D2Bot.updateStatus("Disconnected/LostConnection");
		delay(1000);
		Controls.OkCentered.click();

		break;
	case sdk.game.locations.NewCharSelected:
		Controls.CharSelectExit.click();

		break;
	case sdk.game.locations.CharSelectPleaseWait:
		!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.SelectDifficultySP:
		LocationEvents.selectDifficultySP();

		break;
	case sdk.game.locations.MainMenuConnecting:
		!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location) && Controls.LoginCancelWait.click();

		break;
	case sdk.game.locations.CharSelectConnecting:
	case sdk.game.locations.CharSelectNoChars:
		if (!LocationEvents.charSelectError()) {
			accounts.shift(); // remove current account from the list
			chars.shift();
		}

		break;
	case sdk.game.locations.ServerDown:
		break;
	case sdk.game.locations.LobbyPleaseWait:
		!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location) && Controls.OkCentered.click();

		break;
	case sdk.game.locations.GameNameExists:
	case sdk.game.locations.GameDoesNotExist:
		Controls.CreateGameWindow.click();

		break;
	case sdk.game.locations.GatewaySelect:
		Controls.GatewayCancel.click();

		break;
	case sdk.game.locations.GameIsFull:
		D2Bot.printToConsole("Game is full");
		Starter.lastGameStatus = "ready";
		delay(500);
		Controls.JoinGameWindow.click();

		break;
	case sdk.game.locations.OtherMultiplayer:
		// probably should implement way to use open bnet
		Controls.OtherMultiplayerCancel.click();

		break;
	case sdk.game.locations.TcpIp:
	case sdk.game.locations.TcpIpEnterIp:
		Controls.TcpIpCancel.click();

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main() {
	addEventListener('copydata', Starter.receiveCopyData);

	while (!Starter.handle) {
		delay(100);
	}

	DataFile.updateStats("handle", Starter.handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!Object.keys(Starter.gameInfo).length) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	if (Starter.gameInfo.rdBlocker) {
		D2Bot.printToConsole("You must disable RD Blocker for Mule Logger to work properly. Stopping.");
		D2Bot.stop();

		return;
	}

	parseInfo();

	if (Starter.gameInfo.error) {
		if (!!DataFile.getStats().debugInfo) {
			Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;

			D2Bot.printToConsole("Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area, 10);
		}

		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				if (!Starter.inGame) {
					print("Updating Status");
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					Starter.gameStart = getTickCount();
					DataFile.updateStats("runs", Starter.gameCount);
				}

				D2Bot.updateStatus("Game: " + me.gamename + Starter.timer(Starter.gameStart));
			}

			delay(1000);
		}

		locationAction(getLocation());
		delay(1000);
	}
}
