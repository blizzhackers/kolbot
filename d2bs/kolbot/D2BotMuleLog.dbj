/**
*  @filename    D2BotMuleLogger.dbj
*  @author      kolton, theBGuy
*  @desc        Entry script for Mulelogger.js
*
*  @typedef {import("./sdk/globals")}
*  @typedef {import("./libs/systems/mulelogger/MuleLogger")}
*/

include("critical.js"); // required
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// D2BotMuleLog specific settings - for global settings see libs/starter/StarterConfig.js
Starter.Config.MinGameTime = rand(150, 180); // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
Starter.Config.CreateGameDelay = 5; // Seconds to wait before creating a new game
Starter.Config.SwitchKeyDelay = 0; // Seconds to wait before switching a used/banned key or after realm down

// Override default values for StarterConfig under here by following format
// Starter.Config.ValueToChange = value; // Example: Starter.Config.MinGameTime = 500; // changes MinGameTime to 500 seconds

// only libs we should need here as te rest of the actions are performed from default.dbj thread
include("systems/dropper/DropperSetup.js");
include("systems/mulelogger/MuleLogger.js");

if (!FileTools.exists("data/" + me.profile + ".json")) {
  DataFile.create();
}

const usingDropper = isIncluded("systems/dropper/DropperSetup.js");
const accounts = [];
const chars = [];
const parseInfo = function () {
  usingDropper && parseDropperAccounts(accounts, chars);
  
  for (let i in MuleLogger.LogAccounts) {
    if (MuleLogger.LogAccounts.hasOwnProperty(i) && typeof i === "string") {
      accounts.push(i);
      chars.push(MuleLogger.LogAccounts[i]);
    }
  }
};
const locationAction = (function () {
  let currAcc;
  let charList = [];
  let obj = {};
  let ftjRetry = 0;

  const Controls = require("./libs/modules/Control");
  const {
    locations,
    addLocations
  } = require("./libs/oog/Locations");

  addLocations([sdk.game.locations.Lobby, sdk.game.locations.LobbyChat],
    function () {
      D2Bot.updateStatus("Lobby");

      if (Starter.inGame) {
        if (getTickCount() - Starter.gameStart < Starter.Config.MinGameTime * 1e3) {
          ControlAction.timeoutDelay(
            "Min game time wait",
            Starter.Config.MinGameTime * 1e3 + Starter.gameStart - getTickCount()
          );
        }

        console.log("updating runs");
        D2Bot.updateRuns();
        delay(1000);

        Starter.gameCount += 1;
        Starter.lastGameStatus = "ready";
        Starter.inGame = false;
        Controls.LobbyQuit.click();

        return;
      }

      Starter.LocationEvents.openCreateGameWindow();
    }
  );
  locations.set(sdk.game.locations.CreateGame,
    function (location) {
      D2Bot.updateStatus("Creating Game");

      // remove level restriction
      if (Controls.CharacterDifference.disabled === 5) {
        Controls.CharacterDifferenceButton.click();
      }

      // Max number of players
      Controls.MaxPlayerCount.setText("8");

      if (Starter.gameCount >= 99) {
        Starter.gameCount = 1;

        DataFile.updateStats("runs", Starter.gameCount);
      }

      if (Starter.lastGameStatus === "pending") {
        Starter.gameCount += 1;
        ftjRetry++;
        D2Bot.printToConsole("Failed to create game");
        ControlAction.timeoutDelay("FTJ delay", Time.minutes(ftjRetry));
        if (ftjRetry > 5) {
          ftjRetry = 0;
          D2Bot.printToConsole("FTJ limit reached, failed to log: " + me.name);
          Controls.LobbyQuit.click();

          return;
        }
      }

      ControlAction.timeoutDelay("Make Game Delay", Starter.Config.CreateGameDelay * 1e3);
      createGame(MuleLogger.LogGame[0] + Starter.gameCount, MuleLogger.LogGame[1], 0);
      Starter.locationTimeout(5000, location);
      Starter.lastGameStatus = "pending";
    }
  );
  addLocations(
    [
      sdk.game.locations.JoinGame,
      sdk.game.locations.Ladder,
      sdk.game.locations.ChannelList,
    ],
    function () {
      Starter.LocationEvents.openCreateGameWindow();
    }
  );
  addLocations(
    [
      sdk.game.locations.MainMenu,
      sdk.game.locations.Login,
      sdk.game.locations.SplashScreen,
    ],
    function () {
      if (!accounts.length) {
        MuleLogger.remove();
        D2Bot.printToConsole("Done logging mules!");
        D2Bot.stop(me.profile, true);

        return;
      }

      if (FileTools.exists("logs/MuleLog.json")) {
        obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));

        if (obj.currAcc) {
          for (let i = 0; i < accounts.length; i += 1) {
            if (accounts[i].split("/")[0] === obj.currAcc) {
              accounts.splice(0, i);
              chars.splice(0, i);
              i -= 1;

              break;
            }
          }
        }
      }

      currAcc = accounts[0];
      currAcc = currAcc.split("/");
      charList = chars[0];
      obj.currAcc = currAcc[0];

      console.log("每c4Mule Logger每c2: Login account: " + currAcc[0]);
      MuleLogger.save(md5(currAcc[2].toLowerCase() + currAcc[0].toLowerCase()), currAcc[1]);

      if (ControlAction.loginAccount({ account: currAcc[0], password: currAcc[1], realm: currAcc[2] })) {
        accounts.shift(); // remove current account from the list
      }
    }
  );
  locations.set(sdk.game.locations.CharSelect,
    function () {
      // Single Player screen fix
      if (getLocation() === sdk.game.locations.CharSelect
        && !Controls.CharSelectCurrentRealm.control
        && Controls.BottomLeftExit.click()) {
        return;
      }

      if (!charList.length && Controls.BottomLeftExit.click()) {
        return;
      }

      charList[0] === "all" && (charList = ControlAction.getCharacters());

      if (FileTools.exists("logs/MuleLog.json")) {
        obj = JSON.parse(FileTools.readText("logs/MuleLog.json"));
        
        if (obj.currChar) {
          for (let i = 0; i < charList.length; i += 1) {
            if (charList[i] === obj.currChar) {
              // Remove the previous currChar as well
              charList.splice(0, i + 1);

              break;
            }
          }
        }
      }

      // last char in acc = trigger next acc
      if (!charList.length) {
        console.log("No more characters");
        accounts.shift(); // remove current account from the list
        chars.shift();

        return;
      }

      let currChar = charList.shift();
      obj.currChar = currChar;

      console.log("每c4Mule Logger每c2: Login character: " + currChar);
      FileTools.writeText("logs/MuleLog.json", JSON.stringify(obj));

      if (MuleLogger.AutoPerm) {
        let characterStatus = {
          charname: currChar,
          perm: ControlAction.getPermStatus({ charName: currChar })
        };
        MuleLogger.savePermedStatus(characterStatus);
      }

      ControlAction.loginCharacter({ charName: currChar });
    }
  );
  addLocations([sdk.game.locations.CharSelectConnecting, sdk.game.locations.CharSelectNoChars],
    function () {
      if (!Starter.LocationEvents.charSelectError()) {
        accounts.shift(); // remove current account from the list
        chars.shift();
      }
    }
  );
  locations.set(sdk.game.locations.GameIsFull,
    function () {
      D2Bot.printToConsole("Game is full");
      Starter.lastGameStatus = "ready";
      delay(500);
      Controls.JoinGameWindow.click();
    }
  );
  locations.set(sdk.game.locations.OtherMultiplayer,
    function () {
      Controls.OtherMultiplayerCancel.click();
    }
  );
  locations.set(sdk.game.locations.TcpIp,
    function () {
      Controls.TcpIpCancel.click();
    }
  );

  return {
    /** @param {number} loc */
    run: function (loc) {
      try {
        let func = locations.get(loc);
        if (typeof func === "function") {
          func(loc);
        } else if (loc !== undefined && loc !== null) {
          console.log("Unhandled location: " + loc);
        }
      } catch (e) {
        console.error(e);
      }
    },
  };
})();

function main () {
  addEventListener("copydata", Starter.receiveCopyData);

  while (!Starter.handle) {
    delay(100);
  }

  DataFile.updateStats("handle", Starter.handle);
  delay(500);
  D2Bot.init();
  load("threads/heartbeat.js");

  while (!Object.keys(Starter.gameInfo).length) {
    D2Bot.requestGameInfo();
    delay(500);
  }

  if (Starter.gameInfo.rdBlocker) {
    D2Bot.printToConsole("You must disable RD Blocker for Mule Logger to work properly. Stopping.");
    D2Bot.stop(me.profile, true);

    return;
  }

  parseInfo();

  if (Starter.gameInfo.error) {
    if (DataFile.getStats().debugInfo) {
      Starter.gameInfo.crashInfo = DataFile.getStats().debugInfo;

      D2Bot.printToConsole(
        "Crash Info: Script: " + JSON.parse(Starter.gameInfo.crashInfo).currScript
        + " Area: " + JSON.parse(Starter.gameInfo.crashInfo).area,
        sdk.colors.D2Bot.Gray
      );
    }

    ControlAction.timeoutDelay("Crash Delay", Starter.Config.CrashDelay * 1e3);
    D2Bot.updateRuns();
  }

  DataFile.updateStats("debugInfo", JSON.stringify({ currScript: "none", area: "out of game" }));

  while (true) {
    // returns true before actually in game so we can't only use this check
    while (me.ingame) {
      // returns false when switching acts so we can't use while
      if (me.gameReady) {
        if (!Starter.inGame) {
          console.log("Updating Status");
          Starter.lastGameStatus = "ingame";
          Starter.inGame = true;
          Starter.gameStart = getTickCount();
          DataFile.updateStats("runs", Starter.gameCount);
        }

        D2Bot.updateStatus("Game: " + me.gamename + Starter.timer(Starter.gameStart));
      }

      delay(1000);
    }

    locationAction.run(getLocation());
    delay(1000);
  }
}
